{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, isBrowser, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport '../../../types/Auth.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  var _Amplify$getConfig$Au, _input$provider, _input$options, _input$options2, _input$options3, _input$options4;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  await assertUserNotAuthenticated();\n  let provider = 'COGNITO'; // Default\n  if (typeof (input === null || input === void 0 ? void 0 : input.provider) === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input !== null && input !== void 0 && (_input$provider = input.provider) !== null && _input$provider !== void 0 && _input$provider.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input === null || input === void 0 ? void 0 : input.customState,\n    preferPrivateSession: input === null || input === void 0 || (_input$options = input.options) === null || _input$options === void 0 ? void 0 : _input$options.preferPrivateSession,\n    options: {\n      loginHint: input === null || input === void 0 || (_input$options2 = input.options) === null || _input$options2 === void 0 ? void 0 : _input$options2.loginHint,\n      lang: input === null || input === void 0 || (_input$options3 = input.options) === null || _input$options3 === void 0 ? void 0 : _input$options3.lang,\n      nonce: input === null || input === void 0 || (_input$options4 = input.options) === null || _input$options4 === void 0 ? void 0 : _input$options4.nonce\n    }\n  });\n}\nconst oauthSignIn = async _ref => {\n  var _await$openAuthSessio;\n  let {\n    oauthConfig,\n    provider,\n    clientId,\n    customState,\n    preferPrivateSession,\n    options\n  } = _ref;\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const {\n    loginHint,\n    lang,\n    nonce\n  } = options !== null && options !== void 0 ? options : {};\n  const randomState = generateState();\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? \"\".concat(randomState, \"-\").concat(urlSafeEncode(customState)) : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  if (isBrowser()) oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const queryString = Object.entries(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    redirect_uri: redirectUri,\n    response_type: responseType,\n    client_id: clientId,\n    identity_provider: provider,\n    scope: scopes.join(' ')\n  }, loginHint && {\n    login_hint: loginHint\n  }), lang && {\n    lang\n  }), nonce && {\n    nonce\n  }), {}, {\n    state\n  }, responseType === 'code' && {\n    code_challenge: toCodeChallenge(),\n    code_challenge_method: method\n  })).map(_ref2 => {\n    let [k, v] = _ref2;\n    return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(v));\n  }).join('&');\n  // TODO(v6): use URL object instead\n  const oAuthUrl = \"https://\".concat(domain, \"/oauth2/authorize?\").concat(queryString);\n  // this will only take effect in the following scenarios:\n  // 1. the user cancels the OAuth flow on web via back button, and\n  // 2. when bfcache is enabled\n  listenForOAuthFlowCancellation(oAuthStore);\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (_await$openAuthSessio = await openAuthSession(oAuthUrl)) !== null && _await$openAuthSessio !== void 0 ? _await$openAuthSessio : {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };","map":{"version":3,"names":["signInWithRedirect","input","_Amplify$getConfig$Au","_input$provider","_input$options","_input$options2","_input$options3","_input$options4","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","assertOAuthConfig","oAuthStore","setAuthConfig","assertUserNotAuthenticated","provider","cognitoHostedUIIdentityProviderMap","custom","oauthSignIn","oauthConfig","loginWith","oauth","clientId","userPoolClientId","customState","preferPrivateSession","options","loginHint","lang","nonce","_ref","_await$openAuthSessio","domain","redirectSignIn","responseType","scopes","randomState","generateState","state","concat","urlSafeEncode","value","method","toCodeChallenge","generateCodeVerifier","redirectUri","getRedirectUrl","isBrowser","storeOAuthInFlight","storeOAuthState","storePKCE","queryString","Object","entries","_objectSpread","redirect_uri","response_type","client_id","identity_provider","scope","join","login_hint","code_challenge","code_challenge_method","map","_ref2","k","v","encodeURIComponent","oAuthUrl","listenForOAuthFlowCancellation","type","error","url","openAuthSession","createOAuthError","String","completeOAuthFlow","currentUrl","userAgentValue","getAuthUserAgentValue","AuthAction","SignInWithRedirect","err","handleFailure"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithRedirect.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertOAuthConfig, assertTokenProviderConfig, isBrowser, urlSafeEncode, } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models';\nimport { getAuthUserAgentValue, openAuthSession } from '../../../utils';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { completeOAuthFlow, generateCodeVerifier, generateState, getRedirectUrl, handleFailure, oAuthStore, } from '../utils/oauth';\nimport { createOAuthError } from '../utils/oauth/createOAuthError';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow';\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nexport async function signInWithRedirect(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n    await assertUserNotAuthenticated();\n    let provider = 'COGNITO'; // Default\n    if (typeof input?.provider === 'string') {\n        provider = cognitoHostedUIIdentityProviderMap[input.provider];\n    }\n    else if (input?.provider?.custom) {\n        provider = input.provider.custom;\n    }\n    return oauthSignIn({\n        oauthConfig: authConfig.loginWith.oauth,\n        clientId: authConfig.userPoolClientId,\n        provider,\n        customState: input?.customState,\n        preferPrivateSession: input?.options?.preferPrivateSession,\n        options: {\n            loginHint: input?.options?.loginHint,\n            lang: input?.options?.lang,\n            nonce: input?.options?.nonce,\n        },\n    });\n}\nconst oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options, }) => {\n    const { domain, redirectSignIn, responseType, scopes } = oauthConfig;\n    const { loginHint, lang, nonce } = options ?? {};\n    const randomState = generateState();\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    const state = customState\n        ? `${randomState}-${urlSafeEncode(customState)}`\n        : randomState;\n    const { value, method, toCodeChallenge } = generateCodeVerifier(128);\n    const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n    if (isBrowser())\n        oAuthStore.storeOAuthInFlight(true);\n    oAuthStore.storeOAuthState(state);\n    oAuthStore.storePKCE(value);\n    const queryString = Object.entries({\n        redirect_uri: redirectUri,\n        response_type: responseType,\n        client_id: clientId,\n        identity_provider: provider,\n        scope: scopes.join(' '),\n        // eslint-disable-next-line camelcase\n        ...(loginHint && { login_hint: loginHint }),\n        ...(lang && { lang }),\n        ...(nonce && { nonce }),\n        state,\n        ...(responseType === 'code' && {\n            code_challenge: toCodeChallenge(),\n            code_challenge_method: method,\n        }),\n    })\n        .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n        .join('&');\n    // TODO(v6): use URL object instead\n    const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;\n    // this will only take effect in the following scenarios:\n    // 1. the user cancels the OAuth flow on web via back button, and\n    // 2. when bfcache is enabled\n    listenForOAuthFlowCancellation(oAuthStore);\n    // the following is effective only in react-native as openAuthSession resolves only in react-native\n    const { type, error, url } = (await openAuthSession(oAuthUrl, redirectSignIn, preferPrivateSession)) ??\n        {};\n    try {\n        if (type === 'error') {\n            throw createOAuthError(String(error));\n        }\n        if (type === 'success' && url) {\n            await completeOAuthFlow({\n                currentUrl: url,\n                clientId,\n                domain,\n                redirectUri,\n                responseType,\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n                preferPrivateSession,\n            });\n        }\n    }\n    catch (err) {\n        await handleFailure(err);\n        // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n        throw err;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}