{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../utils/logger.mjs';\nimport { validateBucketOwnerID } from '../../utils/validateBucketOwnerID.mjs';\nimport { DEFAULT_DELIMITER, STORAGE_INPUT_PREFIX } from '../../utils/constants.mjs';\nimport { validateStorageOperationInputWithPrefix } from '../../utils/validateStorageOperationInputWithPrefix.mjs';\nimport { urlDecode } from '../../utils/urlDecoder.mjs';\nimport '../../utils/client/s3data/base.mjs';\nimport '../../utils/client/s3data/getObject.mjs';\nimport { listObjectsV2 } from '../../utils/client/s3data/listObjectsV2.mjs';\nimport '../../utils/client/s3data/putObject.mjs';\nimport '../../utils/client/s3data/createMultipartUpload.mjs';\nimport '../../utils/client/s3data/uploadPart.mjs';\nimport '../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../utils/client/s3data/listParts.mjs';\nimport '../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../utils/client/s3data/copyObject.mjs';\nimport '../../utils/client/s3data/headObject.mjs';\nimport '../../utils/client/s3data/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\nimport { IntegrityError } from '../../../../errors/IntegrityError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_PAGE_SIZE = 1000;\nconst list = async (amplify, input) => {\n  const {\n    options = {}\n  } = input;\n  const {\n    s3Config,\n    bucket,\n    keyPrefix: generatedPrefix,\n    identityId\n  } = await resolveS3ConfigAndInput(amplify, input);\n  const {\n    inputType,\n    objectKey\n  } = validateStorageOperationInputWithPrefix(input, identityId);\n  validateBucketOwnerID(options.expectedBucketOwner);\n  const isInputWithPrefix = inputType === STORAGE_INPUT_PREFIX;\n  // @ts-expect-error pageSize and nextToken should not coexist with listAll\n  if (options !== null && options !== void 0 && options.listAll && (options !== null && options !== void 0 && options.pageSize || options !== null && options !== void 0 && options.nextToken)) {\n    const anyOptions = options;\n    logger.debug(\"listAll is set to true, ignoring \".concat(anyOptions !== null && anyOptions !== void 0 && anyOptions.pageSize ? \"pageSize: \".concat(anyOptions === null || anyOptions === void 0 ? void 0 : anyOptions.pageSize) : '', \" \").concat(anyOptions !== null && anyOptions !== void 0 && anyOptions.nextToken ? \"nextToken: \".concat(anyOptions === null || anyOptions === void 0 ? void 0 : anyOptions.nextToken) : '', \".\"));\n  }\n  const listParams = {\n    Bucket: bucket,\n    Prefix: isInputWithPrefix ? \"\".concat(generatedPrefix).concat(objectKey) : objectKey,\n    MaxKeys: options !== null && options !== void 0 && options.listAll ? undefined : options === null || options === void 0 ? void 0 : options.pageSize,\n    ContinuationToken: options !== null && options !== void 0 && options.listAll ? undefined : options === null || options === void 0 ? void 0 : options.nextToken,\n    Delimiter: getDelimiter(options),\n    ExpectedBucketOwner: options === null || options === void 0 ? void 0 : options.expectedBucketOwner,\n    EncodingType: 'url'\n  };\n  logger.debug(\"listing items from \\\"\".concat(listParams.Prefix, \"\\\"\"));\n  const listInputArgs = {\n    s3Config,\n    listParams\n  };\n  if (options.listAll) {\n    if (isInputWithPrefix) {\n      return _listAllWithPrefix(_objectSpread(_objectSpread({}, listInputArgs), {}, {\n        generatedPrefix\n      }));\n    } else {\n      return _listAllWithPath(listInputArgs);\n    }\n  } else {\n    if (isInputWithPrefix) {\n      return _listWithPrefix(_objectSpread(_objectSpread({}, listInputArgs), {}, {\n        generatedPrefix\n      }));\n    } else {\n      return _listWithPath(listInputArgs);\n    }\n  }\n};\n/** @deprecated Use {@link _listAllWithPath} instead. */\nconst _listAllWithPrefix = async _ref => {\n  let {\n    s3Config,\n    listParams,\n    generatedPrefix\n  } = _ref;\n  const listResult = [];\n  let continuationToken = listParams.ContinuationToken;\n  do {\n    const {\n      items: pageResults,\n      nextToken: pageNextToken\n    } = await _listWithPrefix({\n      generatedPrefix,\n      s3Config,\n      listParams: _objectSpread(_objectSpread({}, listParams), {}, {\n        ContinuationToken: continuationToken,\n        MaxKeys: MAX_PAGE_SIZE\n      })\n    });\n    listResult.push(...pageResults);\n    continuationToken = pageNextToken;\n  } while (continuationToken);\n  return {\n    items: listResult\n  };\n};\n/** @deprecated Use {@link _listWithPath} instead. */\nconst _listWithPrefix = async _ref2 => {\n  let {\n    s3Config,\n    listParams,\n    generatedPrefix\n  } = _ref2;\n  const listParamsClone = _objectSpread({}, listParams);\n  if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n    logger.debug(\"defaulting pageSize to \".concat(MAX_PAGE_SIZE, \".\"));\n    listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n  }\n  const response = await listObjectsV2(_objectSpread(_objectSpread({}, s3Config), {}, {\n    userAgentValue: getStorageUserAgentValue(StorageAction.List)\n  }), listParamsClone);\n  const listOutput = decodeEncodedElements(response);\n  validateEchoedElements(listParamsClone, listOutput);\n  if (!(listOutput !== null && listOutput !== void 0 && listOutput.Contents)) {\n    return {\n      items: []\n    };\n  }\n  return {\n    items: listOutput.Contents.map(item => ({\n      key: generatedPrefix ? item.Key.substring(generatedPrefix.length) : item.Key,\n      eTag: item.ETag,\n      lastModified: item.LastModified,\n      size: item.Size\n    })),\n    nextToken: listOutput.NextContinuationToken\n  };\n};\nconst _listAllWithPath = async _ref3 => {\n  let {\n    s3Config,\n    listParams\n  } = _ref3;\n  const listResult = [];\n  const excludedSubpaths = [];\n  let continuationToken = listParams.ContinuationToken;\n  do {\n    const {\n      items: pageResults,\n      excludedSubpaths: pageExcludedSubpaths,\n      nextToken: pageNextToken\n    } = await _listWithPath({\n      s3Config,\n      listParams: _objectSpread(_objectSpread({}, listParams), {}, {\n        ContinuationToken: continuationToken,\n        MaxKeys: MAX_PAGE_SIZE\n      })\n    });\n    listResult.push(...pageResults);\n    excludedSubpaths.push(...(pageExcludedSubpaths !== null && pageExcludedSubpaths !== void 0 ? pageExcludedSubpaths : []));\n    continuationToken = pageNextToken;\n  } while (continuationToken);\n  return {\n    items: listResult,\n    excludedSubpaths\n  };\n};\nconst _listWithPath = async _ref4 => {\n  let {\n    s3Config,\n    listParams\n  } = _ref4;\n  const listParamsClone = _objectSpread({}, listParams);\n  if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n    logger.debug(\"defaulting pageSize to \".concat(MAX_PAGE_SIZE, \".\"));\n    listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n  }\n  const response = await listObjectsV2(_objectSpread(_objectSpread({}, s3Config), {}, {\n    userAgentValue: getStorageUserAgentValue(StorageAction.List)\n  }), listParamsClone);\n  const listOutput = decodeEncodedElements(response);\n  validateEchoedElements(listParamsClone, listOutput);\n  const {\n    Contents: contents,\n    NextContinuationToken: nextContinuationToken,\n    CommonPrefixes: commonPrefixes\n  } = listOutput;\n  const excludedSubpaths = commonPrefixes && mapCommonPrefixesToExcludedSubpaths(commonPrefixes);\n  if (!contents) {\n    return {\n      items: [],\n      nextToken: nextContinuationToken,\n      excludedSubpaths\n    };\n  }\n  return {\n    items: contents.map(item => ({\n      path: item.Key,\n      eTag: item.ETag,\n      lastModified: item.LastModified,\n      size: item.Size\n    })),\n    nextToken: nextContinuationToken,\n    excludedSubpaths\n  };\n};\nconst mapCommonPrefixesToExcludedSubpaths = commonPrefixes => {\n  return commonPrefixes.reduce((mappedSubpaths, _ref5) => {\n    let {\n      Prefix\n    } = _ref5;\n    if (Prefix) {\n      mappedSubpaths.push(Prefix);\n    }\n    return mappedSubpaths;\n  }, []);\n};\nconst getDelimiter = options => {\n  var _options$subpathStrat;\n  if ((options === null || options === void 0 || (_options$subpathStrat = options.subpathStrategy) === null || _options$subpathStrat === void 0 ? void 0 : _options$subpathStrat.strategy) === 'exclude') {\n    var _options$subpathStrat2, _options$subpathStrat3;\n    return (_options$subpathStrat2 = options === null || options === void 0 || (_options$subpathStrat3 = options.subpathStrategy) === null || _options$subpathStrat3 === void 0 ? void 0 : _options$subpathStrat3.delimiter) !== null && _options$subpathStrat2 !== void 0 ? _options$subpathStrat2 : DEFAULT_DELIMITER;\n  }\n};\nconst validateEchoedElements = (listInput, listOutput) => {\n  const validEchoedParameters = listInput.Bucket === listOutput.Name && listInput.Delimiter === listOutput.Delimiter && listInput.MaxKeys === listOutput.MaxKeys && listInput.Prefix === listOutput.Prefix && listInput.ContinuationToken === listOutput.ContinuationToken;\n  if (!validEchoedParameters) {\n    throw new IntegrityError({\n      metadata: listOutput.$metadata\n    });\n  }\n};\n/**\n * Decodes URL-encoded elements in the S3 `ListObjectsV2Output` response when `EncodingType` is `'url'`.\n * Applies to values for 'Delimiter', 'Prefix', 'StartAfter' and 'Key' in the response.\n */\nconst decodeEncodedElements = listOutput => {\n  if (listOutput.EncodingType !== 'url') {\n    return listOutput;\n  }\n  const decodedListOutput = _objectSpread({}, listOutput);\n  // Decode top-level properties\n  ['Delimiter', 'Prefix', 'StartAfter'].forEach(prop => {\n    const value = listOutput[prop];\n    if (typeof value === 'string') {\n      decodedListOutput[prop] = urlDecode(value);\n    }\n  });\n  // Decode 'Key' in each item of 'Contents', if it exists\n  if (listOutput.Contents) {\n    decodedListOutput.Contents = listOutput.Contents.map(content => _objectSpread(_objectSpread({}, content), {}, {\n      Key: content.Key ? urlDecode(content.Key) : content.Key\n    }));\n  }\n  // Decode 'Prefix' in each item of 'CommonPrefixes', if it exists\n  if (listOutput.CommonPrefixes) {\n    decodedListOutput.CommonPrefixes = listOutput.CommonPrefixes.map(content => _objectSpread(_objectSpread({}, content), {}, {\n      Prefix: content.Prefix ? urlDecode(content.Prefix) : content.Prefix\n    }));\n  }\n  return decodedListOutput;\n};\nexport { list };","map":{"version":3,"names":["MAX_PAGE_SIZE","list","amplify","input","options","s3Config","bucket","keyPrefix","generatedPrefix","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInputWithPrefix","validateBucketOwnerID","expectedBucketOwner","isInputWithPrefix","STORAGE_INPUT_PREFIX","listAll","pageSize","nextToken","anyOptions","logger","debug","concat","listParams","Bucket","Prefix","MaxKeys","undefined","ContinuationToken","Delimiter","getDelimiter","ExpectedBucketOwner","EncodingType","listInputArgs","_listAllWithPrefix","_objectSpread","_listAllWithPath","_listWithPrefix","_listWithPath","_ref","listResult","continuationToken","items","pageResults","pageNextToken","push","_ref2","listParamsClone","response","listObjectsV2","userAgentValue","getStorageUserAgentValue","StorageAction","List","listOutput","decodeEncodedElements","validateEchoedElements","Contents","map","item","key","Key","substring","length","eTag","ETag","lastModified","LastModified","size","Size","NextContinuationToken","_ref3","excludedSubpaths","pageExcludedSubpaths","_ref4","contents","nextContinuationToken","CommonPrefixes","commonPrefixes","mapCommonPrefixesToExcludedSubpaths","path","reduce","mappedSubpaths","_ref5","_options$subpathStrat","subpathStrategy","strategy","_options$subpathStrat2","_options$subpathStrat3","delimiter","DEFAULT_DELIMITER","listInput","validEchoedParameters","Name","IntegrityError","metadata","$metadata","decodedListOutput","forEach","prop","value","urlDecode","content"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/list.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, urlDecode, validateBucketOwnerID, validateStorageOperationInputWithPrefix, } from '../../utils';\nimport { listObjectsV2, } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { DEFAULT_DELIMITER, STORAGE_INPUT_PREFIX } from '../../utils/constants';\nimport { IntegrityError } from '../../../../errors/IntegrityError';\nconst MAX_PAGE_SIZE = 1000;\nexport const list = async (amplify, input) => {\n    const { options = {} } = input;\n    const { s3Config, bucket, keyPrefix: generatedPrefix, identityId, } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInputWithPrefix(input, identityId);\n    validateBucketOwnerID(options.expectedBucketOwner);\n    const isInputWithPrefix = inputType === STORAGE_INPUT_PREFIX;\n    // @ts-expect-error pageSize and nextToken should not coexist with listAll\n    if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n        const anyOptions = options;\n        logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n    }\n    const listParams = {\n        Bucket: bucket,\n        Prefix: isInputWithPrefix ? `${generatedPrefix}${objectKey}` : objectKey,\n        MaxKeys: options?.listAll ? undefined : options?.pageSize,\n        ContinuationToken: options?.listAll ? undefined : options?.nextToken,\n        Delimiter: getDelimiter(options),\n        ExpectedBucketOwner: options?.expectedBucketOwner,\n        EncodingType: 'url',\n    };\n    logger.debug(`listing items from \"${listParams.Prefix}\"`);\n    const listInputArgs = {\n        s3Config,\n        listParams,\n    };\n    if (options.listAll) {\n        if (isInputWithPrefix) {\n            return _listAllWithPrefix({\n                ...listInputArgs,\n                generatedPrefix,\n            });\n        }\n        else {\n            return _listAllWithPath(listInputArgs);\n        }\n    }\n    else {\n        if (isInputWithPrefix) {\n            return _listWithPrefix({ ...listInputArgs, generatedPrefix });\n        }\n        else {\n            return _listWithPath(listInputArgs);\n        }\n    }\n};\n/** @deprecated Use {@link _listAllWithPath} instead. */\nconst _listAllWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listResult = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, nextToken: pageNextToken } = await _listWithPrefix({\n            generatedPrefix,\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n    };\n};\n/** @deprecated Use {@link _listWithPath} instead. */\nconst _listWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    if (!listOutput?.Contents) {\n        return {\n            items: [],\n        };\n    }\n    return {\n        items: listOutput.Contents.map(item => ({\n            key: generatedPrefix\n                ? item.Key.substring(generatedPrefix.length)\n                : item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: listOutput.NextContinuationToken,\n    };\n};\nconst _listAllWithPath = async ({ s3Config, listParams, }) => {\n    const listResult = [];\n    const excludedSubpaths = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, excludedSubpaths: pageExcludedSubpaths, nextToken: pageNextToken, } = await _listWithPath({\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        excludedSubpaths.push(...(pageExcludedSubpaths ?? []));\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n        excludedSubpaths,\n    };\n};\nconst _listWithPath = async ({ s3Config, listParams, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    const { Contents: contents, NextContinuationToken: nextContinuationToken, CommonPrefixes: commonPrefixes, } = listOutput;\n    const excludedSubpaths = commonPrefixes && mapCommonPrefixesToExcludedSubpaths(commonPrefixes);\n    if (!contents) {\n        return {\n            items: [],\n            nextToken: nextContinuationToken,\n            excludedSubpaths,\n        };\n    }\n    return {\n        items: contents.map(item => ({\n            path: item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: nextContinuationToken,\n        excludedSubpaths,\n    };\n};\nconst mapCommonPrefixesToExcludedSubpaths = (commonPrefixes) => {\n    return commonPrefixes.reduce((mappedSubpaths, { Prefix }) => {\n        if (Prefix) {\n            mappedSubpaths.push(Prefix);\n        }\n        return mappedSubpaths;\n    }, []);\n};\nconst getDelimiter = (options) => {\n    if (options?.subpathStrategy?.strategy === 'exclude') {\n        return options?.subpathStrategy?.delimiter ?? DEFAULT_DELIMITER;\n    }\n};\nconst validateEchoedElements = (listInput, listOutput) => {\n    const validEchoedParameters = listInput.Bucket === listOutput.Name &&\n        listInput.Delimiter === listOutput.Delimiter &&\n        listInput.MaxKeys === listOutput.MaxKeys &&\n        listInput.Prefix === listOutput.Prefix &&\n        listInput.ContinuationToken === listOutput.ContinuationToken;\n    if (!validEchoedParameters) {\n        throw new IntegrityError({ metadata: listOutput.$metadata });\n    }\n};\n/**\n * Decodes URL-encoded elements in the S3 `ListObjectsV2Output` response when `EncodingType` is `'url'`.\n * Applies to values for 'Delimiter', 'Prefix', 'StartAfter' and 'Key' in the response.\n */\nconst decodeEncodedElements = (listOutput) => {\n    if (listOutput.EncodingType !== 'url') {\n        return listOutput;\n    }\n    const decodedListOutput = { ...listOutput };\n    // Decode top-level properties\n    ['Delimiter', 'Prefix', 'StartAfter'].forEach(prop => {\n        const value = listOutput[prop];\n        if (typeof value === 'string') {\n            decodedListOutput[prop] = urlDecode(value);\n        }\n    });\n    // Decode 'Key' in each item of 'Contents', if it exists\n    if (listOutput.Contents) {\n        decodedListOutput.Contents = listOutput.Contents.map(content => ({\n            ...content,\n            Key: content.Key ? urlDecode(content.Key) : content.Key,\n        }));\n    }\n    // Decode 'Prefix' in each item of 'CommonPrefixes', if it exists\n    if (listOutput.CommonPrefixes) {\n        decodedListOutput.CommonPrefixes = listOutput.CommonPrefixes.map(content => ({\n            ...content,\n            Prefix: content.Prefix ? urlDecode(content.Prefix) : content.Prefix,\n        }));\n    }\n    return decodedListOutput;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}