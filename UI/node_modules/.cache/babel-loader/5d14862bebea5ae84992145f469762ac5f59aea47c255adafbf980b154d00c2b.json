{"ast":null,"code":"import '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../../../errors/utils/assertValidationError.mjs';\nimport { StorageValidationErrorCode } from '../../../../../errors/types/validation.mjs';\nimport { MAX_OBJECT_SIZE, DEFAULT_PART_SIZE } from '../../../utils/constants.mjs';\nimport { createUploadTask } from '../../../utils/transferTask.mjs';\nimport { byteLength } from './byteLength.mjs';\nimport { putObjectJob } from './putObjectJob.mjs';\nimport { getMultipartUploadHandlers } from './multipart/uploadHandlers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst uploadData = input => {\n  const {\n    data\n  } = input;\n  const dataByteLength = byteLength(data);\n  // Using InvalidUploadSource error code because the input data must NOT be any\n  // of permitted Blob, string, ArrayBuffer(View) if byteLength could not be determined.\n  assertValidationError(dataByteLength !== undefined, StorageValidationErrorCode.InvalidUploadSource);\n  assertValidationError(dataByteLength <= MAX_OBJECT_SIZE, StorageValidationErrorCode.ObjectIsTooLarge);\n  if (dataByteLength <= DEFAULT_PART_SIZE) {\n    // Single part upload\n    const abortController = new AbortController();\n    return createUploadTask({\n      isMultipartUpload: false,\n      job: putObjectJob(input, abortController.signal, dataByteLength),\n      onCancel: message => {\n        abortController.abort(message);\n      }\n    });\n  } else {\n    // Multipart upload\n    const {\n      multipartUploadJob,\n      onPause,\n      onResume,\n      onCancel\n    } = getMultipartUploadHandlers(input, dataByteLength);\n    return createUploadTask({\n      isMultipartUpload: true,\n      job: multipartUploadJob,\n      onCancel: message => {\n        onCancel(message);\n      },\n      onPause,\n      onResume\n    });\n  }\n};\nexport { uploadData };","map":{"version":3,"names":["uploadData","input","data","dataByteLength","byteLength","assertValidationError","undefined","StorageValidationErrorCode","InvalidUploadSource","MAX_OBJECT_SIZE","ObjectIsTooLarge","DEFAULT_PART_SIZE","abortController","AbortController","createUploadTask","isMultipartUpload","job","putObjectJob","signal","onCancel","message","abort","multipartUploadJob","onPause","onResume","getMultipartUploadHandlers"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createUploadTask } from '../../../utils';\nimport { assertValidationError } from '../../../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../../../errors/types/validation';\nimport { DEFAULT_PART_SIZE, MAX_OBJECT_SIZE } from '../../../utils/constants';\nimport { byteLength } from './byteLength';\nimport { putObjectJob } from './putObjectJob';\nimport { getMultipartUploadHandlers, } from './multipart';\nexport const uploadData = (input) => {\n    const { data } = input;\n    const dataByteLength = byteLength(data);\n    // Using InvalidUploadSource error code because the input data must NOT be any\n    // of permitted Blob, string, ArrayBuffer(View) if byteLength could not be determined.\n    assertValidationError(dataByteLength !== undefined, StorageValidationErrorCode.InvalidUploadSource);\n    assertValidationError(dataByteLength <= MAX_OBJECT_SIZE, StorageValidationErrorCode.ObjectIsTooLarge);\n    if (dataByteLength <= DEFAULT_PART_SIZE) {\n        // Single part upload\n        const abortController = new AbortController();\n        return createUploadTask({\n            isMultipartUpload: false,\n            job: putObjectJob(input, abortController.signal, dataByteLength),\n            onCancel: (message) => {\n                abortController.abort(message);\n            },\n        });\n    }\n    else {\n        // Multipart upload\n        const { multipartUploadJob, onPause, onResume, onCancel } = getMultipartUploadHandlers(input, dataByteLength);\n        return createUploadTask({\n            isMultipartUpload: true,\n            job: multipartUploadJob,\n            onCancel: (message) => {\n                onCancel(message);\n            },\n            onPause,\n            onResume,\n        });\n    }\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQY,MAACA,UAAU,GAAIC,KAAK,IAAK;EACjC,MAAM;IAAEC;EAAI,CAAE,GAAGD,KAAK;EACtB,MAAME,cAAc,GAAGC,UAAU,CAACF,IAAI,CAAC;EAC3C;EACA;EACIG,qBAAqB,CAACF,cAAc,KAAKG,SAAS,EAAEC,0BAA0B,CAACC,mBAAmB,CAAC;EACnGH,qBAAqB,CAACF,cAAc,IAAIM,eAAe,EAAEF,0BAA0B,CAACG,gBAAgB,CAAC;EACrG,IAAIP,cAAc,IAAIQ,iBAAiB,EAAE;IAC7C;IACQ,MAAMC,eAAe,GAAG,IAAIC,eAAe,EAAE;IAC7C,OAAOC,gBAAgB,CAAC;MACpBC,iBAAiB,EAAE,KAAK;MACxBC,GAAG,EAAEC,YAAY,CAAChB,KAAK,EAAEW,eAAe,CAACM,MAAM,EAAEf,cAAc,CAAC;MAChEgB,QAAQ,EAAGC,OAAO,IAAK;QACnBR,eAAe,CAACS,KAAK,CAACD,OAAO,CAAC;MAC9C;IACA,CAAS,CAAC;EACV,OACS;IACT;IACQ,MAAM;MAAEE,kBAAkB;MAAEC,OAAO;MAAEC,QAAQ;MAAEL;IAAQ,CAAE,GAAGM,0BAA0B,CAACxB,KAAK,EAAEE,cAAc,CAAC;IAC7G,OAAOW,gBAAgB,CAAC;MACpBC,iBAAiB,EAAE,IAAI;MACvBC,GAAG,EAAEM,kBAAkB;MACvBH,QAAQ,EAAGC,OAAO,IAAK;QACnBD,QAAQ,CAACC,OAAO,CAAC;MACjC,CAAa;MACDG,OAAO;MACPC;IACZ,CAAS,CAAC;EACV;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}