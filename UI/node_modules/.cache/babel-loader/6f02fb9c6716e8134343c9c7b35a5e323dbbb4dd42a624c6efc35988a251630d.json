{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { parseXmlBody } from '../utils/parsePayload.mjs';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from '../utils/deserializeHelpers.mjs';\nimport { assignStringVariables, serializeObjectConfigsToHeaders, validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = _objectSpread(_objectSpread({}, await serializeObjectConfigsToHeaders(input)), assignStringVariables({\n    'x-amz-checksum-algorithm': input.ChecksumAlgorithm,\n    'x-amz-checksum-type': input.ChecksumType,\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n  }));\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  url.search = 'uploads';\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'POST',\n    headers,\n    url\n  };\n};\nconst createMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    const parsed = await parseXmlBody(response);\n    const contents = map(parsed, {\n      UploadId: 'UploadId'\n    });\n    return _objectSpread({\n      $metadata: parseMetadata(response)\n    }, contents);\n  }\n};\nconst createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { createMultipartUpload };","map":{"version":3,"names":["createMultipartUploadSerializer","input","endpoint","headers","_objectSpread","serializeObjectConfigsToHeaders","assignStringVariables","ChecksumAlgorithm","ChecksumType","ExpectedBucketOwner","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","validateObjectUrl","bucketName","Bucket","key","objectURL","method","createMultipartUploadDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","parsed","parseXmlBody","contents","map","UploadId","$metadata","parseMetadata","createMultipartUpload","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/createMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, parseXmlBody, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders(input)),\n        ...assignStringVariables({\n            'x-amz-checksum-algorithm': input.ChecksumAlgorithm,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = 'uploads';\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'POST',\n        headers,\n        url,\n    };\n};\nconst createMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            UploadId: 'UploadId',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,+BAA+B,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/D,MAAMC,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACL,MAAMC,+BAA+B,CAACJ,KAAK,CAAC,GAC7CK,qBAAqB,CAAC;IACrB,0BAA0B,EAAEL,KAAK,CAACM,iBAAiB;IACnD,qBAAqB,EAAEN,KAAK,CAACO,YAAY;IACzC,6BAA6B,EAAEP,KAAK,CAACQ;EACjD,CAAS,CAAC,CACL;EACD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACT,QAAQ,CAACQ,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACZ,KAAK,CAACa,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAET,KAAK,CAACa,GAAG,CAAC;EACzDJ,GAAG,CAACO,MAAM,GAAG,SAAS;EACtBC,iBAAiB,CAAC;IACdC,UAAU,EAAElB,KAAK,CAACmB,MAAM;IACxBC,GAAG,EAAEpB,KAAK,CAACa,GAAG;IACdQ,SAAS,EAAEZ;EACnB,CAAK,CAAC;EACF,OAAO;IACHa,MAAM,EAAE,MAAM;IACdpB,OAAO;IACPO;EACR,CAAK;AACL,CAAC;AACD,MAAMc,iCAAiC,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,MAAMI,MAAM,GAAG,MAAMC,YAAY,CAACL,QAAQ,CAAC;IAC3C,MAAMM,QAAQ,GAAGC,GAAG,CAACH,MAAM,EAAE;MACzBI,QAAQ,EAAE;IACtB,CAAS,CAAC;IACF,OAAA7B,aAAA;MACI8B,SAAS,EAAEC,aAAa,CAACV,QAAQ;IAAC,GAC/BM,QAAQ;EAEvB;AACA,CAAC;AACW,MAACK,qBAAqB,GAAGC,iBAAiB,CAACC,iBAAiB,EAAEtC,+BAA+B,EAAEwB,iCAAiC,EAAApB,aAAA,CAAAA,aAAA,KAAOmC,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}