{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport '../runtime/s3TransferHandler/fetch.mjs';\nimport { parser } from '../runtime/xmlParser/pureJs.mjs';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nconst createXmlErrorParser = function () {\n  let {\n    noErrorWrapping = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async response => {\n    var _ref, _errorLocation$messag;\n    if (!response || response.statusCode < 300) {\n      return;\n    }\n    const {\n      statusCode\n    } = response;\n    const body = await parseXmlBody(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation !== null && errorLocation !== void 0 && errorLocation.Code ? errorLocation.Code : statusCode === 404 ? 'NotFound' : statusCode.toString();\n    const message = (_ref = (_errorLocation$messag = errorLocation === null || errorLocation === void 0 ? void 0 : errorLocation.message) !== null && _errorLocation$messag !== void 0 ? _errorLocation$messag : errorLocation === null || errorLocation === void 0 ? void 0 : errorLocation.Message) !== null && _ref !== void 0 ? _ref : code;\n    const error = new Error(message);\n    return Object.assign(error, {\n      name: code,\n      $metadata: parseMetadata(response)\n    });\n  };\n};\nconst parseXmlBody = async response => {\n  if (!response.body) {\n    // S3 can return 200 without a body indicating failure.\n    throw new Error('S3 aborted request.');\n  }\n  const data = await response.body.text();\n  if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n    try {\n      return parser.parse(data);\n    } catch (error) {\n      throw new Error(\"Failed to parse XML response: \".concat(error));\n    }\n  }\n  return {};\n};\nexport { createXmlErrorParser, parseXmlBody };","map":{"version":3,"names":["createXmlErrorParser","noErrorWrapping","arguments","length","undefined","response","_ref","_errorLocation$messag","statusCode","body","parseXmlBody","errorLocation","Error","code","Code","toString","message","Message","error","Object","assign","name","$metadata","parseMetadata","data","text","parser","parse","concat"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/utils/parsePayload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { parser } from '../runtime';\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nexport const createXmlErrorParser = ({ noErrorWrapping = false, } = {}) => async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await parseXmlBody(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation?.Code\n        ? errorLocation.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: parseMetadata(response),\n    });\n};\nexport const parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return parser.parse(data);\n        }\n        catch (error) {\n            throw new Error(`Failed to parse XML response: ${error}`);\n        }\n    }\n    return {};\n};\n"],"mappings":";;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,oBAAoB,GAAG,SAAAA,CAAA;EAAA,IAAC;IAAEC,eAAe,GAAG;EAAK,CAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OAAK,MAAOG,QAAQ,IAAK;IAAA,IAAAC,IAAA,EAAAC,qBAAA;IAC3F,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAACG,UAAU,GAAG,GAAG,EAAE;MACxC;IACR;IACI,MAAM;MAAEA;IAAU,CAAE,GAAGH,QAAQ;IAC/B,MAAMI,IAAI,GAAG,MAAMC,YAAY,CAACL,QAAQ,CAAC;IACzC,MAAMM,aAAa,GAAGV,eAAe,GAAGQ,IAAI,GAAGA,IAAI,CAACG,KAAK;IACzD,MAAMC,IAAI,GAAGF,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEG,IAAA,GACtBH,aAAa,CAACG,IAAA,GACdN,UAAU,KAAK,MACX,aACAA,UAAU,CAACO,QAAQ,EAAE;IAC/B,MAAMC,OAAO,IAAAV,IAAA,IAAAC,qBAAA,GAAGI,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEK,OAAO,cAAAT,qBAAA,cAAAA,qBAAA,GAAII,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEM,OAAO,cAAAX,IAAA,cAAAA,IAAA,GAAIO,IAAI;IACxE,MAAMK,KAAK,GAAG,IAAIN,KAAK,CAACI,OAAO,CAAC;IAChC,OAAOG,MAAM,CAACC,MAAM,CAACF,KAAK,EAAE;MACxBG,IAAI,EAAER,IAAI;MACVS,SAAS,EAAEC,aAAa,CAAClB,QAAQ;IACzC,CAAK,CAAC;EACN;AAAA;AACY,MAACK,YAAY,GAAG,MAAOL,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,CAACI,IAAI,EAAE;IACxB;IACQ,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EAC9C;EACI,MAAMY,IAAI,GAAG,MAAMnB,QAAQ,CAACI,IAAI,CAACgB,IAAI,EAAE;EACvC,IAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErB,MAAM,IAAG,CAAC,EAAE;IAClB,IAAI;MACA,OAAOuB,MAAM,CAACC,KAAK,CAACH,IAAI,CAAC;IACrC,EACQ,OAAON,KAAK,EAAE;MACV,MAAM,IAAIN,KAAK,kCAAAgB,MAAA,CAAkCV,KAAK,CAAE,CAAC;IACrE;EACA;EACI,OAAO,EAAE;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}