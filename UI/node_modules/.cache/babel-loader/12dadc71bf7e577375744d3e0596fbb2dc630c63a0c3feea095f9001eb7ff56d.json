{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from '../utils/deserializeHelpers.mjs';\nimport { assignStringVariables, validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst uploadPartSerializer = async (input, endpoint) => {\n  const headers = _objectSpread(_objectSpread({}, assignStringVariables({\n    'x-amz-checksum-crc32': input.ChecksumCRC32,\n    'content-md5': input.ContentMD5,\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n  })), {}, {\n    'content-type': 'application/octet-stream'\n  });\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.PartNumber, 'PartNumber');\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    partNumber: input.PartNumber + '',\n    uploadId: input.UploadId\n  }).toString();\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body: input.Body\n  };\n};\nconst uploadPartDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    return _objectSpread(_objectSpread({}, map(response.headers, {\n      ETag: 'etag'\n    })), {}, {\n      $metadata: parseMetadata(response)\n    });\n  }\n};\nconst uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { uploadPart };","map":{"version":3,"names":["uploadPartSerializer","input","endpoint","headers","_objectSpread","assignStringVariables","ChecksumCRC32","ContentMD5","ExpectedBucketOwner","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","PartNumber","UploadId","search","AmplifyUrlSearchParams","partNumber","uploadId","validateObjectUrl","bucketName","Bucket","key","objectURL","method","body","Body","uploadPartDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","map","ETag","$metadata","parseMetadata","uploadPart","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/uploadPart.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst uploadPartSerializer = async (input, endpoint) => {\n    const headers = {\n        ...assignStringVariables({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'content-md5': input.ContentMD5,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n        'content-type': 'application/octet-stream',\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.PartNumber, 'PartNumber');\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        partNumber: input.PartNumber + '',\n        uploadId: input.UploadId,\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst uploadPartDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                ETag: 'etag',\n            }),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACNC,qBAAqB,CAAC;IACrB,sBAAsB,EAAEJ,KAAK,CAACK,aAAa;IAC3C,aAAa,EAAEL,KAAK,CAACM,UAAU;IAC/B,6BAA6B,EAAEN,KAAK,CAACO;EACjD,CAAS,CAAC;IACF,cAAc,EAAE;EAA0B,EAC7C;EACD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACR,QAAQ,CAACO,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACX,KAAK,CAACY,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAER,KAAK,CAACY,GAAG,CAAC;EACzDD,2BAA2B,CAAC,CAAC,CAACX,KAAK,CAACe,UAAU,EAAE,YAAY,CAAC;EAC7DJ,2BAA2B,CAAC,CAAC,CAACX,KAAK,CAACgB,QAAQ,EAAE,UAAU,CAAC;EACzDR,GAAG,CAACS,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpCC,UAAU,EAAEnB,KAAK,CAACe,UAAU,GAAG,EAAE;IACjCK,QAAQ,EAAEpB,KAAK,CAACgB;EACxB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACbW,iBAAiB,CAAC;IACdC,UAAU,EAAEtB,KAAK,CAACuB,MAAM;IACxBC,GAAG,EAAExB,KAAK,CAACY,GAAG;IACda,SAAS,EAAEjB;EACnB,CAAK,CAAC;EACF,OAAO;IACHkB,MAAM,EAAE,KAAK;IACbxB,OAAO;IACPM,GAAG;IACHmB,IAAI,EAAE3B,KAAK,CAAC4B;EACpB,CAAK;AACL,CAAC;AACD,MAAMC,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,OAAA3B,aAAA,CAAAA,aAAA,KACO+B,GAAG,CAACJ,QAAQ,CAAC5B,OAAO,EAAE;MACrBiC,IAAI,EAAE;IACtB,CAAa,CAAC;MACFC,SAAS,EAAEC,aAAa,CAACP,QAAQ;IAAC;EAE9C;AACA,CAAC;AACW,MAACQ,UAAU,GAAGC,iBAAiB,CAACC,iBAAiB,EAAEzC,oBAAoB,EAAE8B,sBAAsB,EAAA1B,aAAA,CAAAA,aAAA,KAAOsC,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}