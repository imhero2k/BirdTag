{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from '../utils/deserializeHelpers.mjs';\nimport { assignStringVariables, serializeObjectConfigsToHeaders, validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst putObjectSerializer = async (input, endpoint) => {\n  var _input$ContentType;\n  const headers = _objectSpread(_objectSpread({}, await serializeObjectConfigsToHeaders(_objectSpread(_objectSpread({}, input), {}, {\n    ContentType: (_input$ContentType = input.ContentType) !== null && _input$ContentType !== void 0 ? _input$ContentType : 'application/octet-stream'\n  }))), assignStringVariables({\n    'content-md5': input.ContentMD5,\n    'x-amz-checksum-crc32': input.ChecksumCRC32,\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    'If-None-Match': input.IfNoneMatch\n  }));\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  url.search = new AmplifyUrlSearchParams({\n    'x-id': 'PutObject'\n  }).toString();\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body: input.Body\n  };\n};\nconst putObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    return _objectSpread(_objectSpread({}, map(response.headers, {\n      ETag: 'etag',\n      VersionId: 'x-amz-version-id'\n    })), {}, {\n      $metadata: parseMetadata(response)\n    });\n  }\n};\nconst putObject = composeServiceApi(s3TransferHandler, putObjectSerializer, putObjectDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { putObject };","map":{"version":3,"names":["putObjectSerializer","input","endpoint","_input$ContentType","headers","_objectSpread","serializeObjectConfigsToHeaders","ContentType","assignStringVariables","ContentMD5","ChecksumCRC32","ExpectedBucketOwner","IfNoneMatch","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","AmplifyUrlSearchParams","validateObjectUrl","bucketName","Bucket","key","objectURL","method","body","Body","putObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","map","ETag","VersionId","$metadata","parseMetadata","putObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/putObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst putObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders({\n            ...input,\n            ContentType: input.ContentType ?? 'application/octet-stream',\n        })),\n        ...assignStringVariables({\n            'content-md5': input.ContentMD5,\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'PutObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst putObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                ETag: 'etag',\n                VersionId: 'x-amz-version-id',\n            }),\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const putObject = composeServiceApi(s3TransferHandler, putObjectSerializer, putObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,mBAAmB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAAA,IAAAC,kBAAA;EACnD,MAAMC,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACL,MAAMC,+BAA+B,CAAAD,aAAA,CAAAA,aAAA,KAClCJ,KAAK;IACRM,WAAW,GAAAJ,kBAAA,GAAEF,KAAK,CAACM,WAAW,cAAAJ,kBAAA,cAAAA,kBAAA,GAAI;EAA0B,EAC/D,CAAC,GACCK,qBAAqB,CAAC;IACrB,aAAa,EAAEP,KAAK,CAACQ,UAAU;IAC/B,sBAAsB,EAAER,KAAK,CAACS,aAAa;IAC3C,6BAA6B,EAAET,KAAK,CAACU,mBAAmB;IACxD,eAAe,EAAEV,KAAK,CAACW;EACnC,CAAS,CAAC,CACL;EACD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACZ,QAAQ,CAACW,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACf,KAAK,CAACgB,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEZ,KAAK,CAACgB,GAAG,CAAC;EACzDJ,GAAG,CAACO,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpC,MAAM,EAAE;EAChB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACbO,iBAAiB,CAAC;IACdC,UAAU,EAAEtB,KAAK,CAACuB,MAAM;IACxBC,GAAG,EAAExB,KAAK,CAACgB,GAAG;IACdS,SAAS,EAAEb;EACnB,CAAK,CAAC;EACF,OAAO;IACHc,MAAM,EAAE,KAAK;IACbvB,OAAO;IACPS,GAAG;IACHe,IAAI,EAAE3B,KAAK,CAAC4B;EACpB,CAAK;AACL,CAAC;AACD,MAAMC,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,OAAA1B,aAAA,CAAAA,aAAA,KACO8B,GAAG,CAACJ,QAAQ,CAAC3B,OAAO,EAAE;MACrBgC,IAAI,EAAE,MAAM;MACZC,SAAS,EAAE;IAC3B,CAAa,CAAC;MACFC,SAAS,EAAEC,aAAa,CAACR,QAAQ;IAAC;EAE9C;AACA,CAAC;AACW,MAACS,SAAS,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE1C,mBAAmB,EAAE8B,qBAAqB,EAAAzB,aAAA,CAAAA,aAAA,KAAOsC,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}