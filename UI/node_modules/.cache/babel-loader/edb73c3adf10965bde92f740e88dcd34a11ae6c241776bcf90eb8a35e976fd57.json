{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError } from '../utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey, assignStringVariables } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst abortMultipartUploadSerializer = (input, endpoint) => {\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    'x-id': 'AbortMultipartUpload',\n    uploadId: input.UploadId\n  }).toString();\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  const headers = _objectSpread({}, assignStringVariables({\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n  }));\n  return {\n    method: 'DELETE',\n    headers,\n    url\n  };\n};\nconst abortMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    return {\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { abortMultipartUpload };","map":{"version":3,"names":["abortMultipartUploadSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","validateObjectUrl","bucketName","Bucket","key","objectURL","headers","_objectSpread","assignStringVariables","ExpectedBucketOwner","method","abortMultipartUploadDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","$metadata","parseMetadata","abortMultipartUpload","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/abortMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { assignStringVariables, buildStorageServiceError, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst abortMultipartUploadSerializer = (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'AbortMultipartUpload',\n        uploadId: input.UploadId,\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = {\n        ...assignStringVariables({\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    return {\n        method: 'DELETE',\n        headers,\n        url,\n    };\n};\nconst abortMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,8BAA8B,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACF,QAAQ,CAACC,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACM,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEF,KAAK,CAACM,GAAG,CAAC;EACzDD,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACS,QAAQ,EAAE,UAAU,CAAC;EACzDP,GAAG,CAACQ,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpC,MAAM,EAAE,sBAAsB;IAC9BC,QAAQ,EAAEZ,KAAK,CAACS;EACxB,CAAK,CAAC,CAACL,QAAQ,EAAE;EACbS,iBAAiB,CAAC;IACdC,UAAU,EAAEd,KAAK,CAACe,MAAM;IACxBC,GAAG,EAAEhB,KAAK,CAACM,GAAG;IACdW,SAAS,EAAEf;EACnB,CAAK,CAAC;EACF,MAAMgB,OAAO,GAAAC,aAAA,KACNC,qBAAqB,CAAC;IACrB,6BAA6B,EAAEpB,KAAK,CAACqB;EACjD,CAAS,CAAC,CACL;EACD,OAAO;IACHC,MAAM,EAAE,QAAQ;IAChBJ,OAAO;IACPhB;EACR,CAAK;AACL,CAAC;AACD,MAAMqB,gCAAgC,GAAG,MAAOC,QAAQ,IAAK;EACzD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,OAAO;MACHI,SAAS,EAAEC,aAAa,CAACL,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACW,MAACM,oBAAoB,GAAGC,iBAAiB,CAACC,iBAAiB,EAAEjC,8BAA8B,EAAEwB,gCAAgC,EAAAJ,aAAA,CAAAA,aAAA,KAAOc,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}