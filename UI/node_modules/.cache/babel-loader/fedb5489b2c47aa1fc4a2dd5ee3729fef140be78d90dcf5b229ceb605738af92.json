{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getActorContext, getSortedFormFields, areEmptyArrays, areEmptyObjects, isString, authenticatorTextUtil } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n  if (currentDeps.length !== nextDeps.length) {\n    return false;\n  }\n  return currentDeps.every((currentDep, index) => {\n    const nextDep = nextDeps[index];\n    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {\n      return true;\n    }\n    return currentDep === nextDep;\n  });\n}\nconst getComparator = selector => (currentFacade, nextFacade) => {\n  const currentSelectorDeps = selector(currentFacade);\n  const nextSelectorDeps = selector(nextFacade);\n  // Shallow compare the array values\n  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getQRFields = state => {\n  var _getActorContext;\n  return _objectSpread({}, (_getActorContext = getActorContext(state)) === null || _getActorContext === void 0 || (_getActorContext = _getActorContext.formFields) === null || _getActorContext === void 0 || (_getActorContext = _getActorContext.setupTotp) === null || _getActorContext === void 0 ? void 0 : _getActorContext.QR);\n};\nconst flattenFormFields = fields => fields.flatMap(_ref => {\n  let [name, options] = _ref;\n  return _objectSpread({\n    name\n  }, options);\n});\nconst convertContactMethodsToFields = function () {\n  let unverifiedUserAttributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return unverifiedUserAttributes && Object.entries(unverifiedUserAttributes).map(_ref2 => {\n    let [name, value] = _ref2;\n    const valueIsString = isString(value);\n    if (!valueIsString || !name) {\n      return {};\n    }\n    return {\n      name,\n      label: value,\n      type: 'radio',\n      value\n    };\n  });\n};\nconst convertAllowedMfaTypesToFields = function () {\n  let allowedMfaTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return allowedMfaTypes.map(mfaType => ({\n    name: 'mfa_type',\n    label: authenticatorTextUtil.getMfaTypeLabelByValue(mfaType),\n    type: 'radio',\n    value: mfaType\n  }));\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state) => {\n  if (isComponentRouteKey(route)) {\n    if (route === 'verifyUser') {\n      return convertContactMethodsToFields(getActorContext(state).unverifiedUserAttributes);\n    }\n    if (route === 'selectMfaType') {\n      return convertAllowedMfaTypesToFields(getActorContext(state).allowedMfaTypes);\n    }\n    return flattenFormFields(getSortedFormFields(route, state));\n  }\n  return [];\n};\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields };","map":{"version":3,"names":["getActorContext","getSortedFormFields","areEmptyArrays","areEmptyObjects","isString","authenticatorTextUtil","isComponentRouteKey","defaultComparator","areSelectorDepsEqual","currentDeps","nextDeps","length","every","currentDep","index","nextDep","getComparator","selector","currentFacade","nextFacade","currentSelectorDeps","nextSelectorDeps","getQRFields","state","_getActorContext","_objectSpread","formFields","setupTotp","QR","flattenFormFields","fields","flatMap","_ref","name","options","convertContactMethodsToFields","unverifiedUserAttributes","arguments","undefined","Object","entries","map","_ref2","value","valueIsString","label","type","convertAllowedMfaTypesToFields","allowedMfaTypes","mfaType","getMfaTypeLabelByValue","getMachineFields","route"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs"],"sourcesContent":["import { getActorContext, getSortedFormFields, areEmptyArrays, areEmptyObjects, isString, authenticatorTextUtil } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n    if (currentDeps.length !== nextDeps.length) {\n        return false;\n    }\n    return currentDeps.every((currentDep, index) => {\n        const nextDep = nextDeps[index];\n        if (areEmptyArrays(currentDep, nextDep) ||\n            areEmptyObjects(currentDep, nextDep)) {\n            return true;\n        }\n        return currentDep === nextDep;\n    });\n}\nconst getComparator = (selector) => (currentFacade, nextFacade) => {\n    const currentSelectorDeps = selector(currentFacade);\n    const nextSelectorDeps = selector(nextFacade);\n    // Shallow compare the array values\n    return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getQRFields = (state) => ({\n    ...getActorContext(state)?.formFields?.setupTotp?.QR,\n});\nconst flattenFormFields = (fields) => fields.flatMap(([name, options]) => ({ name, ...options }));\nconst convertContactMethodsToFields = (unverifiedUserAttributes = {}) => {\n    return (unverifiedUserAttributes &&\n        Object.entries(unverifiedUserAttributes).map(([name, value]) => {\n            const valueIsString = isString(value);\n            if (!valueIsString || !name) {\n                return {};\n            }\n            return { name, label: value, type: 'radio', value };\n        }));\n};\nconst convertAllowedMfaTypesToFields = (allowedMfaTypes = []) => {\n    return allowedMfaTypes.map((mfaType) => ({\n        name: 'mfa_type',\n        label: authenticatorTextUtil.getMfaTypeLabelByValue(mfaType),\n        type: 'radio',\n        value: mfaType,\n    }));\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state) => {\n    if (isComponentRouteKey(route)) {\n        if (route === 'verifyUser') {\n            return convertContactMethodsToFields(getActorContext(state).unverifiedUserAttributes);\n        }\n        if (route === 'selectMfaType') {\n            return convertAllowedMfaTypesToFields(getActorContext(state).allowedMfaTypes);\n        }\n        return flattenFormFields(getSortedFormFields(route, state));\n    }\n    return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}