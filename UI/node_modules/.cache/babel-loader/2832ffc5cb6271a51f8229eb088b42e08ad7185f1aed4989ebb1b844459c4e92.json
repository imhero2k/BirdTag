{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getActorState } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { isAuthFieldWithDefaults } from '../form.mjs';\nimport { getPrimaryAlias } from './utils.mjs';\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = fieldName => {\n  let options = defaultFormFieldOptions[fieldName];\n  const {\n    type\n  } = options;\n  if (type === 'tel') {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      dialCode: DEFAULT_COUNTRY_CODE\n    });\n  }\n  return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  return _objectSpread(_objectSpread({}, getDefaultFormField(primaryAlias)), {}, {\n    autocomplete: 'username'\n  });\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = _ => ({\n  confirmation_code: _objectSpread(_objectSpread({}, getDefaultFormField('confirmation_code')), {}, {\n    label: 'Code *',\n    placeholder: 'Code'\n  })\n});\nconst getSignInFormFields = state => ({\n  username: _objectSpread({}, getAliasDefaultFormField(state)),\n  password: _objectSpread(_objectSpread({}, getDefaultFormField('password')), {}, {\n    autocomplete: 'current-password'\n  })\n});\nconst getSignUpFormFields = state => {\n  const {\n    loginMechanisms,\n    signUpAttributes\n  } = state.context.config;\n  const primaryAlias = getPrimaryAlias(state);\n  /**\n   * @migration signUp Fields created here\n   */\n  const fieldNames = Array.from(new Set([...loginMechanisms, 'password', 'confirm_password', ...signUpAttributes]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);\n      formField[fieldName] = _objectSpread({}, fieldAttrs);\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      // eslint-disable-next-line no-console\n      console.debug(\"Authenticator does not have a default implementation for \".concat(fieldName, \". Customize SignUp FormFields to add your own.\"));\n    }\n  }\n  return formField;\n};\nconst getConfirmSignUpFormFields = _ => ({\n  confirmation_code: _objectSpread(_objectSpread({}, getDefaultFormField('confirmation_code')), {}, {\n    placeholder: 'Enter your code'\n  })\n});\nconst getForgotPasswordFormFields = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  const {\n    label\n  } = defaultFormFieldOptions[primaryAlias];\n  return {\n    username: _objectSpread(_objectSpread({}, getAliasDefaultFormField(state)), {}, {\n      label: \"Enter your \".concat(label.toLowerCase()),\n      placeholder: \"Enter your \".concat(label.toLowerCase())\n    })\n  };\n};\nconst getConfirmResetPasswordFormFields = state => _objectSpread(_objectSpread({}, getConfirmationCodeFormFields()), {}, {\n  password: _objectSpread(_objectSpread({}, getDefaultFormField('password')), {}, {\n    label: 'New Password',\n    placeholder: 'New Password'\n  }),\n  confirm_password: _objectSpread(_objectSpread({}, getDefaultFormField('confirm_password')), {}, {\n    label: 'Confirm Password',\n    placeholder: 'Confirm Password'\n  })\n});\nconst getForceNewPasswordFormFields = state => {\n  const actorState = getActorState(state);\n  const {\n    missingAttributes\n  } = actorState.context;\n  const fieldNames = Array.from(new Set(['password', 'confirm_password', ...(missingAttributes !== null && missingAttributes !== void 0 ? missingAttributes : [])]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      formField[fieldName] = _objectSpread({}, getDefaultFormField(fieldName));\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      // eslint-disable-next-line no-console\n      console.debug(\"Authenticator does not have a default implementation for \".concat(fieldName, \". Customize ForceNewPassword FormFields to add your own.\"));\n    }\n  }\n  return formField;\n};\nconst getSetupEmailFormFields = _ => ({\n  email: getDefaultFormField('email')\n});\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n  signIn: getSignInFormFields,\n  signUp: getSignUpFormFields,\n  confirmSignUp: getConfirmSignUpFormFields,\n  confirmSignIn: getConfirmationCodeFormFields,\n  forceNewPassword: getForceNewPasswordFormFields,\n  forgotPassword: getForgotPasswordFormFields,\n  confirmResetPassword: getConfirmResetPasswordFormFields,\n  confirmVerifyUser: getConfirmationCodeFormFields,\n  setupEmail: getSetupEmailFormFields,\n  setupTotp: getConfirmationCodeFormFields\n};\nexport { DEFAULT_COUNTRY_CODE, defaultFormFieldsGetters, getAliasDefaultFormField };","map":{"version":3,"names":["getActorState","defaultFormFieldOptions","isAuthFieldWithDefaults","getPrimaryAlias","DEFAULT_COUNTRY_CODE","getDefaultFormField","fieldName","options","type","_objectSpread","dialCode","getAliasDefaultFormField","state","primaryAlias","autocomplete","getConfirmationCodeFormFields","_","confirmation_code","label","placeholder","getSignInFormFields","username","password","getSignUpFormFields","loginMechanisms","signUpAttributes","context","config","fieldNames","Array","from","Set","formField","fieldAttrs","console","debug","concat","getConfirmSignUpFormFields","getForgotPasswordFormFields","toLowerCase","getConfirmResetPasswordFormFields","confirm_password","getForceNewPasswordFormFields","actorState","missingAttributes","getSetupEmailFormFields","email","defaultFormFieldsGetters","signIn","signUp","confirmSignUp","confirmSignIn","forceNewPassword","forgotPassword","confirmResetPassword","confirmVerifyUser","setupEmail","setupTotp"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/defaults.mjs"],"sourcesContent":["import { getActorState } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { isAuthFieldWithDefaults } from '../form.mjs';\nimport { getPrimaryAlias } from './utils.mjs';\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = (fieldName) => {\n    let options = defaultFormFieldOptions[fieldName];\n    const { type } = options;\n    if (type === 'tel') {\n        options = { ...options, dialCode: DEFAULT_COUNTRY_CODE };\n    }\n    return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = (state) => {\n    const primaryAlias = getPrimaryAlias(state);\n    return {\n        ...getDefaultFormField(primaryAlias),\n        autocomplete: 'username',\n    };\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = (_) => ({\n    confirmation_code: {\n        ...getDefaultFormField('confirmation_code'),\n        label: 'Code *',\n        placeholder: 'Code',\n    },\n});\nconst getSignInFormFields = (state) => ({\n    username: { ...getAliasDefaultFormField(state) },\n    password: {\n        ...getDefaultFormField('password'),\n        autocomplete: 'current-password',\n    },\n});\nconst getSignUpFormFields = (state) => {\n    const { loginMechanisms, signUpAttributes } = state.context.config;\n    const primaryAlias = getPrimaryAlias(state);\n    /**\n     * @migration signUp Fields created here\n     */\n    const fieldNames = Array.from(new Set([\n        ...loginMechanisms,\n        'password',\n        'confirm_password',\n        ...signUpAttributes,\n    ]));\n    const formField = {};\n    for (const fieldName of fieldNames) {\n        if (isAuthFieldWithDefaults(fieldName)) {\n            const fieldAttrs = fieldName === primaryAlias\n                ? getAliasDefaultFormField(state)\n                : getDefaultFormField(fieldName);\n            formField[fieldName] = { ...fieldAttrs };\n        }\n        else {\n            // There's a `custom:*` attribute or one we don't already have an implementation for\n            // eslint-disable-next-line no-console\n            console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);\n        }\n    }\n    return formField;\n};\nconst getConfirmSignUpFormFields = (_) => ({\n    confirmation_code: {\n        ...getDefaultFormField('confirmation_code'),\n        placeholder: 'Enter your code',\n    },\n});\nconst getForgotPasswordFormFields = (state) => {\n    const primaryAlias = getPrimaryAlias(state);\n    const { label } = defaultFormFieldOptions[primaryAlias];\n    return {\n        username: {\n            ...getAliasDefaultFormField(state),\n            label: `Enter your ${label.toLowerCase()}`,\n            placeholder: `Enter your ${label.toLowerCase()}`,\n        },\n    };\n};\nconst getConfirmResetPasswordFormFields = (state) => ({\n    ...getConfirmationCodeFormFields(),\n    password: {\n        ...getDefaultFormField('password'),\n        label: 'New Password',\n        placeholder: 'New Password',\n    },\n    confirm_password: {\n        ...getDefaultFormField('confirm_password'),\n        label: 'Confirm Password',\n        placeholder: 'Confirm Password',\n    },\n});\nconst getForceNewPasswordFormFields = (state) => {\n    const actorState = getActorState(state);\n    const { missingAttributes } = actorState.context;\n    const fieldNames = Array.from(new Set([\n        'password',\n        'confirm_password',\n        ...(missingAttributes ?? []),\n    ]));\n    const formField = {};\n    for (const fieldName of fieldNames) {\n        if (isAuthFieldWithDefaults(fieldName)) {\n            formField[fieldName] = { ...getDefaultFormField(fieldName) };\n        }\n        else {\n            // There's a `custom:*` attribute or one we don't already have an implementation for\n            // eslint-disable-next-line no-console\n            console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);\n        }\n    }\n    return formField;\n};\nconst getSetupEmailFormFields = (_) => ({\n    email: getDefaultFormField('email'),\n});\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n    signIn: getSignInFormFields,\n    signUp: getSignUpFormFields,\n    confirmSignUp: getConfirmSignUpFormFields,\n    confirmSignIn: getConfirmationCodeFormFields,\n    forceNewPassword: getForceNewPasswordFormFields,\n    forgotPassword: getForgotPasswordFormFields,\n    confirmResetPassword: getConfirmResetPasswordFormFields,\n    confirmVerifyUser: getConfirmationCodeFormFields,\n    setupEmail: getSetupEmailFormFields,\n    setupTotp: getConfirmationCodeFormFields,\n};\n\nexport { DEFAULT_COUNTRY_CODE, defaultFormFieldsGetters, getAliasDefaultFormField };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}