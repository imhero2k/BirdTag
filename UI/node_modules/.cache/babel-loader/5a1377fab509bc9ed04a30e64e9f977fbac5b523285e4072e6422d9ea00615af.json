{"ast":null,"code":"import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTotpRoute, resolveSetupEmailRoute, resolveSelectMfaTypeRoute, resolveForgotPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\nfunction useAuthenticatorRoute(_ref) {\n  let {\n    components\n  } = _ref;\n  const {\n    route\n  } = useAuthenticator(routeSelector);\n  const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n  // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n  // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n  // should be returned for a specific route.\n  // Only state machine props specified by the current `routeSelector` will have their current value\n  // returned by `useAuthenticator`, non-machine props returned will always be the current value\n  const routeSelectorProps = useAuthenticator(routeMachineSelector);\n  const {\n    ConfirmResetPassword,\n    ConfirmSignIn,\n    ConfirmSignUp,\n    ConfirmVerifyUser,\n    ForceNewPassword,\n    ForgotPassword,\n    SelectMfaType,\n    SetupEmail,\n    SetupTotp,\n    SignIn,\n    SignUp,\n    VerifyUser\n  } = components;\n  switch (route) {\n    case 'confirmResetPassword':\n      {\n        return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n      }\n    case 'confirmSignIn':\n      {\n        return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n      }\n    case 'confirmSignUp':\n      {\n        return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n      }\n    case 'confirmVerifyUser':\n      {\n        return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n      }\n    case 'forceNewPassword':\n      {\n        return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n      }\n    case 'forgotPassword':\n      {\n        return resolveForgotPasswordRoute(ForgotPassword, routeSelectorProps);\n      }\n    case 'selectMfaType':\n      {\n        return resolveSelectMfaTypeRoute(SelectMfaType, routeSelectorProps);\n      }\n    case 'setupEmail':\n      {\n        return resolveSetupEmailRoute(SetupEmail, routeSelectorProps);\n      }\n    case 'setupTotp':\n      {\n        return resolveSetupTotpRoute(SetupTotp, routeSelectorProps);\n      }\n    case 'signIn':\n      {\n        return resolveSignInRoute(SignIn, routeSelectorProps);\n      }\n    case 'signUp':\n      {\n        return resolveSignUpRoute(SignUp, routeSelectorProps);\n      }\n    case 'verifyUser':\n      {\n        return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n      }\n    default:\n      {\n        return resolveDefault();\n      }\n  }\n}\nexport { useAuthenticatorRoute as default };","map":{"version":3,"names":["useMemo","useAuthenticator","getRouteMachineSelector","resolveDefault","resolveVerifyUserRoute","resolveSignUpRoute","resolveSignInRoute","resolveSetupTotpRoute","resolveSetupEmailRoute","resolveSelectMfaTypeRoute","resolveForgotPasswordRoute","resolveForceNewPasswordRoute","resolveConfirmVerifyUserRoute","resolveConfirmSignUpRoute","resolveConfirmSignInRoute","resolveConfirmResetPasswordRoute","routeSelector","useAuthenticatorRoute","_ref","components","route","routeMachineSelector","routeSelectorProps","ConfirmResetPassword","ConfirmSignIn","ConfirmSignUp","ConfirmVerifyUser","ForceNewPassword","ForgotPassword","SelectMfaType","SetupEmail","SetupTotp","SignIn","SignUp","VerifyUser","default"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.mjs"],"sourcesContent":["import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTotpRoute, resolveSetupEmailRoute, resolveSelectMfaTypeRoute, resolveForgotPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\n\nfunction useAuthenticatorRoute({ components, }) {\n    const { route } = useAuthenticator(routeSelector);\n    const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n    // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n    // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n    // should be returned for a specific route.\n    // Only state machine props specified by the current `routeSelector` will have their current value\n    // returned by `useAuthenticator`, non-machine props returned will always be the current value\n    const routeSelectorProps = useAuthenticator(routeMachineSelector);\n    const { ConfirmResetPassword, ConfirmSignIn, ConfirmSignUp, ConfirmVerifyUser, ForceNewPassword, ForgotPassword, SelectMfaType, SetupEmail, SetupTotp, SignIn, SignUp, VerifyUser, } = components;\n    switch (route) {\n        case 'confirmResetPassword': {\n            return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n        }\n        case 'confirmSignIn': {\n            return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n        }\n        case 'confirmSignUp': {\n            return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n        }\n        case 'confirmVerifyUser': {\n            return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n        }\n        case 'forceNewPassword': {\n            return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n        }\n        case 'forgotPassword': {\n            return resolveForgotPasswordRoute(ForgotPassword, routeSelectorProps);\n        }\n        case 'selectMfaType': {\n            return resolveSelectMfaTypeRoute(SelectMfaType, routeSelectorProps);\n        }\n        case 'setupEmail': {\n            return resolveSetupEmailRoute(SetupEmail, routeSelectorProps);\n        }\n        case 'setupTotp': {\n            return resolveSetupTotpRoute(SetupTotp, routeSelectorProps);\n        }\n        case 'signIn': {\n            return resolveSignInRoute(SignIn, routeSelectorProps);\n        }\n        case 'signUp': {\n            return resolveSignUpRoute(SignUp, routeSelectorProps);\n        }\n        case 'verifyUser': {\n            return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n        }\n        default: {\n            return resolveDefault();\n        }\n    }\n}\n\nexport { useAuthenticatorRoute as default };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,gBAAgB,MAAM,0CAA0C;AACvE,SAASC,uBAAuB,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,yBAAyB,EAAEC,0BAA0B,EAAEC,4BAA4B,EAAEC,6BAA6B,EAAEC,yBAAyB,EAAEC,yBAAyB,EAAEC,gCAAgC,EAAEC,aAAa,QAAQ,aAAa;AAE/Y,SAASC,qBAAqBA,CAAAC,IAAA,EAAkB;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAD,IAAA;EAC1C,MAAM;IAAEE;EAAM,CAAC,GAAGnB,gBAAgB,CAACe,aAAa,CAAC;EACjD,MAAMK,oBAAoB,GAAGrB,OAAO,CAAC,MAAME,uBAAuB,CAACkB,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACnF;EACA;EACA;EACA;EACA;EACA,MAAME,kBAAkB,GAAGrB,gBAAgB,CAACoB,oBAAoB,CAAC;EACjE,MAAM;IAAEE,oBAAoB;IAAEC,aAAa;IAAEC,aAAa;IAAEC,iBAAiB;IAAEC,gBAAgB;IAAEC,cAAc;IAAEC,aAAa;IAAEC,UAAU;IAAEC,SAAS;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGf,UAAU;EACjM,QAAQC,KAAK;IACT,KAAK,sBAAsB;MAAE;QACzB,OAAOL,gCAAgC,CAACQ,oBAAoB,EAAED,kBAAkB,CAAC;MACrF;IACA,KAAK,eAAe;MAAE;QAClB,OAAOR,yBAAyB,CAACU,aAAa,EAAEF,kBAAkB,CAAC;MACvE;IACA,KAAK,eAAe;MAAE;QAClB,OAAOT,yBAAyB,CAACY,aAAa,EAAEH,kBAAkB,CAAC;MACvE;IACA,KAAK,mBAAmB;MAAE;QACtB,OAAOV,6BAA6B,CAACc,iBAAiB,EAAEJ,kBAAkB,CAAC;MAC/E;IACA,KAAK,kBAAkB;MAAE;QACrB,OAAOX,4BAA4B,CAACgB,gBAAgB,EAAEL,kBAAkB,CAAC;MAC7E;IACA,KAAK,gBAAgB;MAAE;QACnB,OAAOZ,0BAA0B,CAACkB,cAAc,EAAEN,kBAAkB,CAAC;MACzE;IACA,KAAK,eAAe;MAAE;QAClB,OAAOb,yBAAyB,CAACoB,aAAa,EAAEP,kBAAkB,CAAC;MACvE;IACA,KAAK,YAAY;MAAE;QACf,OAAOd,sBAAsB,CAACsB,UAAU,EAAER,kBAAkB,CAAC;MACjE;IACA,KAAK,WAAW;MAAE;QACd,OAAOf,qBAAqB,CAACwB,SAAS,EAAET,kBAAkB,CAAC;MAC/D;IACA,KAAK,QAAQ;MAAE;QACX,OAAOhB,kBAAkB,CAAC0B,MAAM,EAAEV,kBAAkB,CAAC;MACzD;IACA,KAAK,QAAQ;MAAE;QACX,OAAOjB,kBAAkB,CAAC4B,MAAM,EAAEX,kBAAkB,CAAC;MACzD;IACA,KAAK,YAAY;MAAE;QACf,OAAOlB,sBAAsB,CAAC8B,UAAU,EAAEZ,kBAAkB,CAAC;MACjE;IACA;MAAS;QACL,OAAOnB,cAAc,CAAC,CAAC;MAC3B;EACJ;AACJ;AAEA,SAASc,qBAAqB,IAAIkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}