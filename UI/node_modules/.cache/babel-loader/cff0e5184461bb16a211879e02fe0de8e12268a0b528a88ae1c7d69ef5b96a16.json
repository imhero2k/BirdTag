{"ast":null,"code":"import { IntegrityError } from '../../../errors/IntegrityError.mjs';\nimport './client/runtime/s3TransferHandler/fetch.mjs';\nimport { parser } from './client/runtime/xmlParser/pureJs.mjs';\nimport './client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { map, emptyArrayGuard, deserializeCompletedPartList } from './client/utils/deserializeHelpers.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { isEqual } from './client/utils/integrityHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction validateMultipartUploadXML(input, xml) {\n  if (!input.Parts) {\n    throw new IntegrityError();\n  }\n  const parsedXML = parser.parse(xml);\n  const mappedCompletedMultipartUpload = map(parsedXML, {\n    Parts: ['Part', value => emptyArrayGuard(value, deserializeCompletedPartList)]\n  });\n  if (!isEqual(input, mappedCompletedMultipartUpload)) {\n    throw new IntegrityError();\n  }\n}\nexport { validateMultipartUploadXML };","map":{"version":3,"names":["validateMultipartUploadXML","input","xml","Parts","IntegrityError","parsedXML","parser","parse","mappedCompletedMultipartUpload","map","value","emptyArrayGuard","deserializeCompletedPartList","isEqual"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/validateMultipartUploadXML.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { IntegrityError } from '../../../errors/IntegrityError';\nimport { parser } from './client/runtime';\nimport { deserializeCompletedPartList, emptyArrayGuard, map, } from './client/utils';\nimport { isEqual } from './client/utils/integrityHelpers';\nexport function validateMultipartUploadXML(input, xml) {\n    if (!input.Parts) {\n        throw new IntegrityError();\n    }\n    const parsedXML = parser.parse(xml);\n    const mappedCompletedMultipartUpload = map(parsedXML, {\n        Parts: [\n            'Part',\n            value => emptyArrayGuard(value, deserializeCompletedPartList),\n        ],\n    });\n    if (!isEqual(input, mappedCompletedMultipartUpload)) {\n        throw new IntegrityError();\n    }\n}\n"],"mappings":";;;;;;;;;;AAAA;AACA;AAKO,SAASA,0BAA0BA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACnD,IAAI,CAACD,KAAK,CAACE,KAAK,EAAE;IACd,MAAM,IAAIC,cAAc,EAAE;EAClC;EACI,MAAMC,SAAS,GAAGC,MAAM,CAACC,KAAK,CAACL,GAAG,CAAC;EACnC,MAAMM,8BAA8B,GAAGC,GAAG,CAACJ,SAAS,EAAE;IAClDF,KAAK,EAAE,CACH,MAAM,EACNO,KAAK,IAAIC,eAAe,CAACD,KAAK,EAAEE,4BAA4B,CAAC;EAEzE,CAAK,CAAC;EACF,IAAI,CAACC,OAAO,CAACZ,KAAK,EAAEO,8BAA8B,CAAC,EAAE;IACjD,MAAM,IAAIJ,cAAc,EAAE;EAClC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}