{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, deserializeMetadata, map, deserializeTimestamp, deserializeNumber } from '../utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey, assignStringVariables } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst headObjectSerializer = async (input, endpoint) => {\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  const headers = assignStringVariables({\n    'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n  });\n  return {\n    method: 'HEAD',\n    headers,\n    url\n  };\n};\nconst headObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    const contents = _objectSpread(_objectSpread({}, map(response.headers, {\n      ContentLength: ['content-length', deserializeNumber],\n      ContentType: 'content-type',\n      ETag: 'etag',\n      LastModified: ['last-modified', deserializeTimestamp],\n      VersionId: 'x-amz-version-id'\n    })), {}, {\n      Metadata: deserializeMetadata(response.headers)\n    });\n    return _objectSpread({\n      $metadata: parseMetadata(response)\n    }, contents);\n  }\n};\nconst headObject = composeServiceApi(s3TransferHandler, headObjectSerializer, headObjectDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { headObject };","map":{"version":3,"names":["headObjectSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","validateObjectUrl","bucketName","Bucket","key","objectURL","headers","assignStringVariables","ExpectedBucketOwner","method","headObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","contents","_objectSpread","map","ContentLength","deserializeNumber","ContentType","ETag","LastModified","deserializeTimestamp","VersionId","Metadata","deserializeMetadata","$metadata","parseMetadata","headObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/headObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, deserializeMetadata, deserializeNumber, deserializeTimestamp, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst headObjectSerializer = async (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const headers = assignStringVariables({\n        'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n    });\n    return {\n        method: 'HEAD',\n        headers,\n        url,\n    };\n};\nconst headObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const contents = {\n            ...map(response.headers, {\n                ContentLength: ['content-length', deserializeNumber],\n                ContentType: 'content-type',\n                ETag: 'etag',\n                LastModified: ['last-modified', deserializeTimestamp],\n                VersionId: 'x-amz-version-id',\n            }),\n            Metadata: deserializeMetadata(response.headers),\n        };\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const headObject = composeServiceApi(s3TransferHandler, headObjectSerializer, headObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACF,QAAQ,CAACC,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACM,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEF,KAAK,CAACM,GAAG,CAAC;EACzDG,iBAAiB,CAAC;IACdC,UAAU,EAAEV,KAAK,CAACW,MAAM;IACxBC,GAAG,EAAEZ,KAAK,CAACM,GAAG;IACdO,SAAS,EAAEX;EACnB,CAAK,CAAC;EACF,MAAMY,OAAO,GAAGC,qBAAqB,CAAC;IAClC,6BAA6B,EAAEf,KAAK,CAACgB;EAC7C,CAAK,CAAC;EACF,OAAO;IACHC,MAAM,EAAE,MAAM;IACdH,OAAO;IACPZ;EACR,CAAK;AACL,CAAC;AACD,MAAMgB,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,MAAMI,QAAQ,GAAAC,aAAA,CAAAA,aAAA,KACPC,GAAG,CAACN,QAAQ,CAACL,OAAO,EAAE;MACrBY,aAAa,EAAE,CAAC,gBAAgB,EAAEC,iBAAiB,CAAC;MACpDC,WAAW,EAAE,cAAc;MAC3BC,IAAI,EAAE,MAAM;MACZC,YAAY,EAAE,CAAC,eAAe,EAAEC,oBAAoB,CAAC;MACrDC,SAAS,EAAE;IAC3B,CAAa,CAAC;MACFC,QAAQ,EAAEC,mBAAmB,CAACf,QAAQ,CAACL,OAAO;IAAC,EAClD;IACD,OAAAU,aAAA;MACIW,SAAS,EAAEC,aAAa,CAACjB,QAAQ;IAAC,GAC/BI,QAAQ;EAEvB;AACA,CAAC;AACW,MAACc,UAAU,GAAGC,iBAAiB,CAACC,iBAAiB,EAAExC,oBAAoB,EAAEmB,sBAAsB,EAAAM,aAAA,CAAAA,aAAA,KAAOgB,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}