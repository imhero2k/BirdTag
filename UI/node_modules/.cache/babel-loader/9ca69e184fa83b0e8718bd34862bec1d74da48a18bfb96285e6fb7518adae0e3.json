{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { parseXmlBody } from '../utils/parsePayload.mjs';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map, emptyArrayGuard, deserializeCompletedPartList } from '../utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst listPartsSerializer = async (input, endpoint) => {\n  const headers = {};\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    'x-id': 'ListParts',\n    uploadId: input.UploadId\n  }).toString();\n  return {\n    method: 'GET',\n    headers,\n    url\n  };\n};\nconst listPartsDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    const parsed = await parseXmlBody(response);\n    const contents = map(parsed, {\n      UploadId: 'UploadId',\n      Parts: ['Part', value => emptyArrayGuard(value, deserializeCompletedPartList)]\n    });\n    return _objectSpread({\n      $metadata: parseMetadata(response)\n    }, contents);\n  }\n};\nconst listParts = composeServiceApi(s3TransferHandler, listPartsSerializer, listPartsDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'text'\n}));\nexport { listParts };","map":{"version":3,"names":["listPartsSerializer","input","endpoint","headers","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","method","listPartsDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","parsed","parseXmlBody","contents","map","Parts","value","emptyArrayGuard","deserializeCompletedPartList","_objectSpread","$metadata","parseMetadata","listParts","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/listParts.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { buildStorageServiceError, deserializeCompletedPartList, emptyArrayGuard, map, parseXmlBody, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { defaultConfig, parseXmlError } from './base';\nconst listPartsSerializer = async (input, endpoint) => {\n    const headers = {};\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'ListParts',\n        uploadId: input.UploadId,\n    }).toString();\n    return {\n        method: 'GET',\n        headers,\n        url,\n    };\n};\nconst listPartsDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBody(response);\n        const contents = map(parsed, {\n            UploadId: 'UploadId',\n            Parts: [\n                'Part',\n                value => emptyArrayGuard(value, deserializeCompletedPartList),\n            ],\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\nexport const listParts = composeServiceApi(s3TransferHandler, listPartsSerializer, listPartsDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAMA,MAAMA,mBAAmB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACH,QAAQ,CAACE,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACN,KAAK,CAACO,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEH,KAAK,CAACO,GAAG,CAAC;EACzDD,2BAA2B,CAAC,CAAC,CAACN,KAAK,CAACU,QAAQ,EAAE,UAAU,CAAC;EACzDP,GAAG,CAACQ,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpC,MAAM,EAAE,WAAW;IACnBC,QAAQ,EAAEb,KAAK,CAACU;EACxB,CAAK,CAAC,CAACL,QAAQ,EAAE;EACb,OAAO;IACHS,MAAM,EAAE,KAAK;IACbZ,OAAO;IACPC;EACR,CAAK;AACL,CAAC;AACD,MAAMY,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,MAAMI,MAAM,GAAG,MAAMC,YAAY,CAACL,QAAQ,CAAC;IAC3C,MAAMM,QAAQ,GAAGC,GAAG,CAACH,MAAM,EAAE;MACzBV,QAAQ,EAAE,UAAU;MACpBc,KAAK,EAAE,CACH,MAAM,EACNC,KAAK,IAAIC,eAAe,CAACD,KAAK,EAAEE,4BAA4B,CAAC;IAE7E,CAAS,CAAC;IACF,OAAAC,aAAA;MACIC,SAAS,EAAEC,aAAa,CAACd,QAAQ;IAAC,GAC/BM,QAAQ;EAEvB;AACA,CAAC;AACW,MAACS,SAAS,GAAGC,iBAAiB,CAACC,iBAAiB,EAAElC,mBAAmB,EAAEgB,qBAAqB,EAAAa,aAAA,CAAAA,aAAA,KAAOM,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}