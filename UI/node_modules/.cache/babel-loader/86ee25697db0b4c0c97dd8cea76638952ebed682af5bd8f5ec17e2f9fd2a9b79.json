{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport '../../../../utils/client/s3data/base.mjs';\nimport '../../../../utils/client/s3data/getObject.mjs';\nimport '../../../../utils/client/s3data/listObjectsV2.mjs';\nimport '../../../../utils/client/s3data/putObject.mjs';\nimport '../../../../utils/client/s3data/createMultipartUpload.mjs';\nimport { uploadPart } from '../../../../utils/client/s3data/uploadPart.mjs';\nimport '../../../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../../../utils/client/s3data/listParts.mjs';\nimport '../../../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../../../utils/client/s3data/copyObject.mjs';\nimport '../../../../utils/client/s3data/headObject.mjs';\nimport '../../../../utils/client/s3data/deleteObject.mjs';\nimport '../../../../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../../../../utils/logger.mjs';\nimport { calculateContentCRC32 } from '../../../../utils/crc32.mjs';\nimport { calculateContentMd5 } from '../../../../utils/md5.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst uploadPartExecutor = async _ref => {\n  let {\n    dataChunkerGenerator,\n    completedPartNumberSet,\n    s3Config,\n    abortSignal,\n    bucket,\n    finalKey,\n    uploadId,\n    onPartUploadCompletion,\n    onProgress,\n    isObjectLockEnabled,\n    useCRC32Checksum,\n    expectedBucketOwner\n  } = _ref;\n  let transferredBytes = 0;\n  for (const {\n    data,\n    partNumber,\n    size\n  } of dataChunkerGenerator) {\n    if (abortSignal.aborted) {\n      logger.debug('upload executor aborted.');\n      break;\n    }\n    if (completedPartNumberSet.has(partNumber)) {\n      logger.debug(\"part \".concat(partNumber, \" already uploaded.\"));\n      transferredBytes += size;\n      onProgress === null || onProgress === void 0 || onProgress({\n        transferredBytes\n      });\n    } else {\n      // handle cancel error\n      let checksumCRC32;\n      if (useCRC32Checksum) {\n        checksumCRC32 = await calculateContentCRC32(data);\n      }\n      const contentMD5 =\n      // check if checksum exists. ex: should not exist in react native\n      !checksumCRC32 && isObjectLockEnabled ? await calculateContentMd5(data) : undefined;\n      const {\n        ETag: eTag\n      } = await uploadPart(_objectSpread(_objectSpread({}, s3Config), {}, {\n        abortSignal,\n        onUploadProgress: event => {\n          const {\n            transferredBytes: currentPartTransferredBytes\n          } = event;\n          onProgress === null || onProgress === void 0 || onProgress({\n            transferredBytes: transferredBytes + currentPartTransferredBytes\n          });\n        }\n      }), {\n        Bucket: bucket,\n        Key: finalKey,\n        UploadId: uploadId,\n        Body: data,\n        PartNumber: partNumber,\n        ChecksumCRC32: checksumCRC32,\n        ContentMD5: contentMD5,\n        ExpectedBucketOwner: expectedBucketOwner\n      });\n      transferredBytes += size;\n      // eTag will always be set even the S3 model interface marks it as optional.\n      onPartUploadCompletion(partNumber, eTag, checksumCRC32);\n    }\n  }\n};\nexport { uploadPartExecutor };","map":{"version":3,"names":["uploadPartExecutor","_ref","dataChunkerGenerator","completedPartNumberSet","s3Config","abortSignal","bucket","finalKey","uploadId","onPartUploadCompletion","onProgress","isObjectLockEnabled","useCRC32Checksum","expectedBucketOwner","transferredBytes","data","partNumber","size","aborted","logger","debug","has","concat","checksumCRC32","calculateContentCRC32","contentMD5","calculateContentMd5","undefined","ETag","eTag","uploadPart","_objectSpread","onUploadProgress","event","currentPartTransferredBytes","Bucket","Key","UploadId","Body","PartNumber","ChecksumCRC32","ContentMD5","ExpectedBucketOwner"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/uploadPartExecutor.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { uploadPart } from '../../../../utils/client/s3data';\nimport { logger } from '../../../../../../utils';\nimport { calculateContentCRC32 } from '../../../../utils/crc32';\nimport { calculateContentMd5 } from '../../../../utils';\nexport const uploadPartExecutor = async ({ dataChunkerGenerator, completedPartNumberSet, s3Config, abortSignal, bucket, finalKey, uploadId, onPartUploadCompletion, onProgress, isObjectLockEnabled, useCRC32Checksum, expectedBucketOwner, }) => {\n    let transferredBytes = 0;\n    for (const { data, partNumber, size } of dataChunkerGenerator) {\n        if (abortSignal.aborted) {\n            logger.debug('upload executor aborted.');\n            break;\n        }\n        if (completedPartNumberSet.has(partNumber)) {\n            logger.debug(`part ${partNumber} already uploaded.`);\n            transferredBytes += size;\n            onProgress?.({\n                transferredBytes,\n            });\n        }\n        else {\n            // handle cancel error\n            let checksumCRC32;\n            if (useCRC32Checksum) {\n                checksumCRC32 = await calculateContentCRC32(data);\n            }\n            const contentMD5 = \n            // check if checksum exists. ex: should not exist in react native\n            !checksumCRC32 && isObjectLockEnabled\n                ? await calculateContentMd5(data)\n                : undefined;\n            const { ETag: eTag } = await uploadPart({\n                ...s3Config,\n                abortSignal,\n                onUploadProgress: (event) => {\n                    const { transferredBytes: currentPartTransferredBytes } = event;\n                    onProgress?.({\n                        transferredBytes: transferredBytes + currentPartTransferredBytes,\n                    });\n                },\n            }, {\n                Bucket: bucket,\n                Key: finalKey,\n                UploadId: uploadId,\n                Body: data,\n                PartNumber: partNumber,\n                ChecksumCRC32: checksumCRC32,\n                ContentMD5: contentMD5,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n            transferredBytes += size;\n            // eTag will always be set even the S3 model interface marks it as optional.\n            onPartUploadCompletion(partNumber, eTag, checksumCRC32);\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKY,MAACA,kBAAkB,GAAG,MAAAC,IAAA,IAAgN;EAAA,IAAzM;IAAEC,oBAAoB;IAAEC,sBAAsB;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,sBAAsB;IAAEC,UAAU;IAAEC,mBAAmB;IAAEC,gBAAgB;IAAEC;EAAmB,CAAG,GAAAZ,IAAA;EACzO,IAAIa,gBAAgB,GAAG,CAAC;EACxB,KAAK,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAI,CAAE,IAAIf,oBAAoB,EAAE;IAC3D,IAAIG,WAAW,CAACa,OAAO,EAAE;MACrBC,MAAM,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACxC;IACZ;IACQ,IAAIjB,sBAAsB,CAACkB,GAAG,CAACL,UAAU,CAAC,EAAE;MACxCG,MAAM,CAACC,KAAK,SAAAE,MAAA,CAASN,UAAU,uBAAoB,CAAC;MACpDF,gBAAgB,IAAIG,IAAI;MACxBP,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAG;QACTI;MAChB,CAAa,CAAC;IACd,OACa;MACb;MACY,IAAIS,aAAa;MACjB,IAAIX,gBAAgB,EAAE;QAClBW,aAAa,GAAG,MAAMC,qBAAqB,CAACT,IAAI,CAAC;MACjE;MACY,MAAMU,UAAU;MAC5B;MACY,CAACF,aAAa,IAAIZ,mBAAA,GACZ,MAAMe,mBAAmB,CAACX,IAAI,IAC9BY,SAAS;MACf,MAAM;QAAEC,IAAI,EAAEC;MAAI,CAAE,GAAG,MAAMC,UAAU,CAAAC,aAAA,CAAAA,aAAA,KAChC3B,QAAQ;QACXC,WAAW;QACX2B,gBAAgB,EAAGC,KAAK,IAAK;UACzB,MAAM;YAAEnB,gBAAgB,EAAEoB;UAA2B,CAAE,GAAGD,KAAK;UAC/DvB,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAG;YACTI,gBAAgB,EAAEA,gBAAgB,GAAGoB;UAC7D,CAAqB,CAAC;QACtB;MAAiB,IACF;QACCC,MAAM,EAAE7B,MAAM;QACd8B,GAAG,EAAE7B,QAAQ;QACb8B,QAAQ,EAAE7B,QAAQ;QAClB8B,IAAI,EAAEvB,IAAI;QACVwB,UAAU,EAAEvB,UAAU;QACtBwB,aAAa,EAAEjB,aAAa;QAC5BkB,UAAU,EAAEhB,UAAU;QACtBiB,mBAAmB,EAAE7B;MACrC,CAAa,CAAC;MACFC,gBAAgB,IAAIG,IAAI;MACpC;MACYR,sBAAsB,CAACO,UAAU,EAAEa,IAAI,EAAEN,aAAa,CAAC;IACnE;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}