{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"phone_number\"],\n  _excluded2 = [\"password\"];\nimport pickBy from 'lodash/pickBy.js';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport { isString } from '../../utils/utils.mjs';\n\n// default `autoSignIn` flag is `true`\nconst DEFAULT_AUTO_SIGN_IN = true;\nconst EMPTY_STRING = '';\nconst sanitizePhoneNumber = (dialCode, phoneNumber) => \"\".concat(dialCode).concat(phoneNumber).replace(/[^A-Z0-9+]/gi, '');\nconst selectUserAttributes = (_, key) => {\n  // Allowlist of Cognito User Pool Attributes (from OpenID Connect specification)\n  // See: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\n  switch (key) {\n    case 'address':\n    case 'birthdate':\n    case 'email':\n    case 'family_name':\n    case 'gender':\n    case 'given_name':\n    case 'locale':\n    case 'middle_name':\n    case 'name':\n    case 'nickname':\n    case 'phone_number':\n    case 'picture':\n    case 'preferred_username':\n    case 'profile':\n    case 'updated_at':\n    case 'website':\n    case 'zoneinfo':\n      return true;\n    // Otherwise, it's a custom attribute\n    default:\n      return key.startsWith('custom:');\n  }\n};\nconst getUserAttributes = formValues => {\n  const _pickBy = pickBy(formValues, selectUserAttributes),\n    {\n      phone_number\n    } = _pickBy,\n    userAttributes = _objectWithoutProperties(_pickBy, _excluded);\n  // only include `phone_number` attribute in `userAttributes` if it has a value\n  if (isString(phone_number) && phone_number !== EMPTY_STRING) {\n    const {\n      country_code\n    } = formValues;\n    return _objectSpread(_objectSpread({}, userAttributes), {}, {\n      phone_number: sanitizePhoneNumber(country_code, phone_number)\n    });\n  }\n  return userAttributes;\n};\nconst getSignUpInput = (username, formValues, loginMechanism) => {\n  const {\n      password\n    } = formValues,\n    values = _objectWithoutProperties(formValues, _excluded2);\n  const attributes = getUserAttributes(values);\n  const options = {\n    autoSignIn: DEFAULT_AUTO_SIGN_IN,\n    userAttributes: _objectSpread({}, loginMechanism === 'phone_number' ? _objectSpread(_objectSpread({}, attributes), {}, {\n      phone_number: username\n    }) : attributes)\n  };\n  return {\n    username,\n    password,\n    options\n  };\n};\nconst getUsernameSignUp = _ref => {\n  let {\n    formValues,\n    loginMechanisms\n  } = _ref;\n  const loginMechanism = loginMechanisms[0];\n  if (loginMechanism === 'phone_number') {\n    const {\n      country_code,\n      phone_number\n    } = formValues;\n    return sanitizePhoneNumber(country_code, phone_number);\n  }\n  return formValues[loginMechanism];\n};\nexport { getSignUpInput, getUserAttributes, getUsernameSignUp, sanitizePhoneNumber };","map":{"version":3,"names":["pickBy","isString","DEFAULT_AUTO_SIGN_IN","EMPTY_STRING","sanitizePhoneNumber","dialCode","phoneNumber","concat","replace","selectUserAttributes","_","key","startsWith","getUserAttributes","formValues","_pickBy","phone_number","userAttributes","_objectWithoutProperties","_excluded","country_code","_objectSpread","getSignUpInput","username","loginMechanism","password","values","_excluded2","attributes","options","autoSignIn","getUsernameSignUp","_ref","loginMechanisms"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/utils.mjs"],"sourcesContent":["import pickBy from 'lodash/pickBy.js';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport { isString } from '../../utils/utils.mjs';\n\n// default `autoSignIn` flag is `true`\nconst DEFAULT_AUTO_SIGN_IN = true;\nconst EMPTY_STRING = '';\nconst sanitizePhoneNumber = (dialCode, phoneNumber) => `${dialCode}${phoneNumber}`.replace(/[^A-Z0-9+]/gi, '');\nconst selectUserAttributes = (_, key) => {\n    // Allowlist of Cognito User Pool Attributes (from OpenID Connect specification)\n    // See: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\n    switch (key) {\n        case 'address':\n        case 'birthdate':\n        case 'email':\n        case 'family_name':\n        case 'gender':\n        case 'given_name':\n        case 'locale':\n        case 'middle_name':\n        case 'name':\n        case 'nickname':\n        case 'phone_number':\n        case 'picture':\n        case 'preferred_username':\n        case 'profile':\n        case 'updated_at':\n        case 'website':\n        case 'zoneinfo':\n            return true;\n        // Otherwise, it's a custom attribute\n        default:\n            return key.startsWith('custom:');\n    }\n};\nconst getUserAttributes = (formValues) => {\n    const { phone_number, ...userAttributes } = pickBy(formValues, selectUserAttributes);\n    // only include `phone_number` attribute in `userAttributes` if it has a value\n    if (isString(phone_number) && phone_number !== EMPTY_STRING) {\n        const { country_code } = formValues;\n        return {\n            ...userAttributes,\n            phone_number: sanitizePhoneNumber(country_code, phone_number),\n        };\n    }\n    return userAttributes;\n};\nconst getSignUpInput = (username, formValues, loginMechanism) => {\n    const { password, ...values } = formValues;\n    const attributes = getUserAttributes(values);\n    const options = {\n        autoSignIn: DEFAULT_AUTO_SIGN_IN,\n        userAttributes: {\n            // use `username` value for `phone_number`\n            ...(loginMechanism === 'phone_number'\n                ? { ...attributes, phone_number: username }\n                : attributes),\n        },\n    };\n    return { username, password, options };\n};\nconst getUsernameSignUp = ({ formValues, loginMechanisms, }) => {\n    const loginMechanism = loginMechanisms[0];\n    if (loginMechanism === 'phone_number') {\n        const { country_code, phone_number } = formValues;\n        return sanitizePhoneNumber(country_code, phone_number);\n    }\n    return formValues[loginMechanism];\n};\n\nexport { getSignUpInput, getUserAttributes, getUsernameSignUp, sanitizePhoneNumber };\n"],"mappings":";;;;AAAA,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAO,mCAAmC;AAC1C,OAAO,wCAAwC;AAC/C,SAASC,QAAQ,QAAQ,uBAAuB;;AAEhD;AACA,MAAMC,oBAAoB,GAAG,IAAI;AACjC,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,mBAAmB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,KAAK,GAAAC,MAAA,CAAGF,QAAQ,EAAAE,MAAA,CAAGD,WAAW,EAAGE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;AAC9G,MAAMC,oBAAoB,GAAGA,CAACC,CAAC,EAAEC,GAAG,KAAK;EACrC;EACA;EACA,QAAQA,GAAG;IACP,KAAK,SAAS;IACd,KAAK,WAAW;IAChB,KAAK,OAAO;IACZ,KAAK,aAAa;IAClB,KAAK,QAAQ;IACb,KAAK,YAAY;IACjB,KAAK,QAAQ;IACb,KAAK,aAAa;IAClB,KAAK,MAAM;IACX,KAAK,UAAU;IACf,KAAK,cAAc;IACnB,KAAK,SAAS;IACd,KAAK,oBAAoB;IACzB,KAAK,SAAS;IACd,KAAK,YAAY;IACjB,KAAK,SAAS;IACd,KAAK,UAAU;MACX,OAAO,IAAI;IACf;IACA;MACI,OAAOA,GAAG,CAACC,UAAU,CAAC,SAAS,CAAC;EACxC;AACJ,CAAC;AACD,MAAMC,iBAAiB,GAAIC,UAAU,IAAK;EACtC,MAAAC,OAAA,GAA4Cf,MAAM,CAACc,UAAU,EAAEL,oBAAoB,CAAC;IAA9E;MAAEO;IAAgC,CAAC,GAAAD,OAAA;IAAhBE,cAAc,GAAAC,wBAAA,CAAAH,OAAA,EAAAI,SAAA;EACvC;EACA,IAAIlB,QAAQ,CAACe,YAAY,CAAC,IAAIA,YAAY,KAAKb,YAAY,EAAE;IACzD,MAAM;MAAEiB;IAAa,CAAC,GAAGN,UAAU;IACnC,OAAAO,aAAA,CAAAA,aAAA,KACOJ,cAAc;MACjBD,YAAY,EAAEZ,mBAAmB,CAACgB,YAAY,EAAEJ,YAAY;IAAC;EAErE;EACA,OAAOC,cAAc;AACzB,CAAC;AACD,MAAMK,cAAc,GAAGA,CAACC,QAAQ,EAAET,UAAU,EAAEU,cAAc,KAAK;EAC7D,MAAM;MAAEC;IAAoB,CAAC,GAAGX,UAAU;IAArBY,MAAM,GAAAR,wBAAA,CAAKJ,UAAU,EAAAa,UAAA;EAC1C,MAAMC,UAAU,GAAGf,iBAAiB,CAACa,MAAM,CAAC;EAC5C,MAAMG,OAAO,GAAG;IACZC,UAAU,EAAE5B,oBAAoB;IAChCe,cAAc,EAAAI,aAAA,KAENG,cAAc,KAAK,cAAc,GAAAH,aAAA,CAAAA,aAAA,KAC1BO,UAAU;MAAEZ,YAAY,EAAEO;IAAQ,KACvCK,UAAU;EAExB,CAAC;EACD,OAAO;IAAEL,QAAQ;IAAEE,QAAQ;IAAEI;EAAQ,CAAC;AAC1C,CAAC;AACD,MAAME,iBAAiB,GAAGC,IAAA,IAAsC;EAAA,IAArC;IAAElB,UAAU;IAAEmB;EAAiB,CAAC,GAAAD,IAAA;EACvD,MAAMR,cAAc,GAAGS,eAAe,CAAC,CAAC,CAAC;EACzC,IAAIT,cAAc,KAAK,cAAc,EAAE;IACnC,MAAM;MAAEJ,YAAY;MAAEJ;IAAa,CAAC,GAAGF,UAAU;IACjD,OAAOV,mBAAmB,CAACgB,YAAY,EAAEJ,YAAY,CAAC;EAC1D;EACA,OAAOF,UAAU,CAACU,cAAc,CAAC;AACrC,CAAC;AAED,SAASF,cAAc,EAAET,iBAAiB,EAAEkB,iBAAiB,EAAE3B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}