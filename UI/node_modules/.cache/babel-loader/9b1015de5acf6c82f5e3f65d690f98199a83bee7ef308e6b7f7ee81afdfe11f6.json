{"ast":null,"code":"import { isCancelError } from '../../../errors/CanceledError.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport { logger } from '../../../utils/logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createCancellableTask = _ref => {\n  let {\n    job,\n    onCancel\n  } = _ref;\n  const state = 'IN_PROGRESS';\n  let canceledErrorMessage;\n  const cancelableTask = {\n    cancel: message => {\n      const {\n        state: taskState\n      } = cancelableTask;\n      if (taskState === 'CANCELED' || taskState === 'ERROR' || taskState === 'SUCCESS') {\n        logger.debug(\"This task cannot be canceled. State: \".concat(taskState));\n        return;\n      }\n      cancelableTask.state = 'CANCELED';\n      canceledErrorMessage = message;\n      onCancel(canceledErrorMessage);\n    },\n    state\n  };\n  const wrappedJobPromise = (async () => {\n    try {\n      const result = await job();\n      cancelableTask.state = 'SUCCESS';\n      return result;\n    } catch (e) {\n      if (isCancelError(e)) {\n        cancelableTask.state = 'CANCELED';\n        e.message = canceledErrorMessage !== null && canceledErrorMessage !== void 0 ? canceledErrorMessage : e.message;\n      }\n      cancelableTask.state = 'ERROR';\n      throw e;\n    }\n  })();\n  return Object.assign(cancelableTask, {\n    result: wrappedJobPromise\n  });\n};\nconst createDownloadTask = createCancellableTask;\nconst createUploadTask = _ref2 => {\n  let {\n    job,\n    onCancel,\n    onResume,\n    onPause,\n    isMultipartUpload\n  } = _ref2;\n  const cancellableTask = createCancellableTask({\n    job,\n    onCancel\n  });\n  const uploadTask = Object.assign(cancellableTask, {\n    pause: () => {\n      const {\n        state\n      } = uploadTask;\n      if (!isMultipartUpload || state !== 'IN_PROGRESS') {\n        logger.debug(\"This task cannot be paused. State: \".concat(state));\n        return;\n      }\n      // TODO(eslint): remove this linter suppression.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      uploadTask.state = 'PAUSED';\n      onPause === null || onPause === void 0 || onPause();\n    },\n    resume: () => {\n      const {\n        state\n      } = uploadTask;\n      if (!isMultipartUpload || state !== 'PAUSED') {\n        logger.debug(\"This task cannot be resumed. State: \".concat(state));\n        return;\n      }\n      // TODO(eslint): remove this linter suppression.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      uploadTask.state = 'IN_PROGRESS';\n      onResume === null || onResume === void 0 || onResume();\n    }\n  });\n  return uploadTask;\n};\nexport { createDownloadTask, createUploadTask };","map":{"version":3,"names":["createCancellableTask","_ref","job","onCancel","state","canceledErrorMessage","cancelableTask","cancel","message","taskState","logger","debug","concat","wrappedJobPromise","result","e","isCancelError","Object","assign","createDownloadTask","createUploadTask","_ref2","onResume","onPause","isMultipartUpload","cancellableTask","uploadTask","pause","resume"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/transferTask.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isCancelError } from '../../../errors/CanceledError';\nimport { logger } from '../../../utils';\nconst createCancellableTask = ({ job, onCancel, }) => {\n    const state = 'IN_PROGRESS';\n    let canceledErrorMessage;\n    const cancelableTask = {\n        cancel: (message) => {\n            const { state: taskState } = cancelableTask;\n            if (taskState === 'CANCELED' ||\n                taskState === 'ERROR' ||\n                taskState === 'SUCCESS') {\n                logger.debug(`This task cannot be canceled. State: ${taskState}`);\n                return;\n            }\n            cancelableTask.state = 'CANCELED';\n            canceledErrorMessage = message;\n            onCancel(canceledErrorMessage);\n        },\n        state,\n    };\n    const wrappedJobPromise = (async () => {\n        try {\n            const result = await job();\n            cancelableTask.state = 'SUCCESS';\n            return result;\n        }\n        catch (e) {\n            if (isCancelError(e)) {\n                cancelableTask.state = 'CANCELED';\n                e.message = canceledErrorMessage ?? e.message;\n            }\n            cancelableTask.state = 'ERROR';\n            throw e;\n        }\n    })();\n    return Object.assign(cancelableTask, {\n        result: wrappedJobPromise,\n    });\n};\nexport const createDownloadTask = createCancellableTask;\nexport const createUploadTask = ({ job, onCancel, onResume, onPause, isMultipartUpload, }) => {\n    const cancellableTask = createCancellableTask({\n        job,\n        onCancel,\n    });\n    const uploadTask = Object.assign(cancellableTask, {\n        pause: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'IN_PROGRESS') {\n                logger.debug(`This task cannot be paused. State: ${state}`);\n                return;\n            }\n            // TODO(eslint): remove this linter suppression.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            uploadTask.state = 'PAUSED';\n            onPause?.();\n        },\n        resume: () => {\n            const { state } = uploadTask;\n            if (!isMultipartUpload || state !== 'PAUSED') {\n                logger.debug(`This task cannot be resumed. State: ${state}`);\n                return;\n            }\n            // TODO(eslint): remove this linter suppression.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            uploadTask.state = 'IN_PROGRESS';\n            onResume?.();\n        },\n    });\n    return uploadTask;\n};\n"],"mappings":";;;;;AAAA;AACA;AAGA,MAAMA,qBAAqB,GAAGC,IAAA,IAAwB;EAAA,IAAvB;IAAEC,GAAG;IAAEC;EAAQ,CAAG,GAAAF,IAAA;EAC7C,MAAMG,KAAK,GAAG,aAAa;EAC3B,IAAIC,oBAAoB;EACxB,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAGC,OAAO,IAAK;MACjB,MAAM;QAAEJ,KAAK,EAAEK;MAAS,CAAE,GAAGH,cAAc;MAC3C,IAAIG,SAAS,KAAK,UAAU,IACxBA,SAAS,KAAK,OAAO,IACrBA,SAAS,KAAK,SAAS,EAAE;QACzBC,MAAM,CAACC,KAAK,yCAAAC,MAAA,CAAyCH,SAAS,CAAE,CAAC;QACjE;MAChB;MACYH,cAAc,CAACF,KAAK,GAAG,UAAU;MACjCC,oBAAoB,GAAGG,OAAO;MAC9BL,QAAQ,CAACE,oBAAoB,CAAC;IAC1C,CAAS;IACDD;EACR,CAAK;EACD,MAAMS,iBAAiB,GAAG,CAAC,YAAY;IACnC,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMZ,GAAG,EAAE;MAC1BI,cAAc,CAACF,KAAK,GAAG,SAAS;MAChC,OAAOU,MAAM;IACzB,EACQ,OAAOC,CAAC,EAAE;MACN,IAAIC,aAAa,CAACD,CAAC,CAAC,EAAE;QAClBT,cAAc,CAACF,KAAK,GAAG,UAAU;QACjCW,CAAC,CAACP,OAAO,GAAGH,oBAAoB,aAApBA,oBAAoB,cAApBA,oBAAoB,GAAIU,CAAC,CAACP,OAAO;MAC7D;MACYF,cAAc,CAACF,KAAK,GAAG,OAAO;MAC9B,MAAMW,CAAC;IACnB;EACA,CAAK,GAAG;EACJ,OAAOE,MAAM,CAACC,MAAM,CAACZ,cAAc,EAAE;IACjCQ,MAAM,EAAED;EAChB,CAAK,CAAC;AACN,CAAC;AACW,MAACM,kBAAkB,GAAGnB,qBAAA;AACtB,MAACoB,gBAAgB,GAAGC,KAAA,IAA8D;EAAA,IAA7D;IAAEnB,GAAG;IAAEC,QAAQ;IAAEmB,QAAQ;IAAEC,OAAO;IAAEC;EAAiB,CAAG,GAAAH,KAAA;EACrF,MAAMI,eAAe,GAAGzB,qBAAqB,CAAC;IAC1CE,GAAG;IACHC;EACR,CAAK,CAAC;EACF,MAAMuB,UAAU,GAAGT,MAAM,CAACC,MAAM,CAACO,eAAe,EAAE;IAC9CE,KAAK,EAAEA,CAAA,KAAM;MACT,MAAM;QAAEvB;MAAK,CAAE,GAAGsB,UAAU;MAC5B,IAAI,CAACF,iBAAiB,IAAIpB,KAAK,KAAK,aAAa,EAAE;QAC/CM,MAAM,CAACC,KAAK,uCAAAC,MAAA,CAAuCR,KAAK,CAAE,CAAC;QAC3D;MAChB;MACA;MACA;MACA;MACYsB,UAAU,CAACtB,KAAK,GAAG,QAAQ;MAC3BmB,OAAO,aAAPA,OAAO,eAAPA,OAAO,EAAI;IACvB,CAAS;IACDK,MAAM,EAAEA,CAAA,KAAM;MACV,MAAM;QAAExB;MAAK,CAAE,GAAGsB,UAAU;MAC5B,IAAI,CAACF,iBAAiB,IAAIpB,KAAK,KAAK,QAAQ,EAAE;QAC1CM,MAAM,CAACC,KAAK,wCAAAC,MAAA,CAAwCR,KAAK,CAAE,CAAC;QAC5D;MAChB;MACA;MACA;MACA;MACYsB,UAAU,CAACtB,KAAK,GAAG,aAAa;MAChCkB,QAAQ,aAARA,QAAQ,eAARA,QAAQ,EAAI;IACxB;EACA,CAAK,CAAC;EACF,OAAOI,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}