{"ast":null,"code":"const SIGN_IN_STEP_MFA_CONFIRMATION = ['CONFIRM_SIGN_IN_WITH_SMS_CODE', 'CONFIRM_SIGN_IN_WITH_TOTP_CODE', 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE'];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, _ref) => {\n  let {\n    data\n  } = _ref;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.signInStep) === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\n};\nconst shouldResetPasswordFromSignIn = (_, _ref2) => {\n  var _data$nextStep;\n  let {\n    data\n  } = _ref2;\n  return (data === null || data === void 0 || (_data$nextStep = data.nextStep) === null || _data$nextStep === void 0 ? void 0 : _data$nextStep.signInStep) === 'RESET_PASSWORD';\n};\nconst shouldConfirmSignUpFromSignIn = (_, _ref3) => {\n  let {\n    data\n  } = _ref3;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.signInStep) === 'CONFIRM_SIGN_UP';\n};\nconst shouldAutoSignIn = (_, _ref4) => {\n  let {\n    data\n  } = _ref4;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.signUpStep) === 'COMPLETE_AUTO_SIGN_IN';\n};\nconst hasCompletedSignIn = (_, _ref5) => {\n  let {\n    data\n  } = _ref5;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.signInStep) === 'DONE';\n};\nconst hasCompletedSignUp = (_, _ref6) => {\n  let {\n    data\n  } = _ref6;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.signUpStep) === 'DONE';\n};\nconst hasCompletedResetPassword = (_, _ref7) => {\n  let {\n    data\n  } = _ref7;\n  return (data === null || data === void 0 ? void 0 : data.nextStep.resetPasswordStep) === 'DONE';\n};\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, _ref8) => {\n  let {\n    data\n  } = _ref8;\n  return (data === null || data === void 0 ? void 0 : data.step) === 'CONFIRM_ATTRIBUTE_COMPLETE';\n};\nconst isConfirmUserAttributeStep = (_, _ref9) => {\n  let {\n    data\n  } = _ref9;\n  return (data === null || data === void 0 ? void 0 : data.step) === 'CONFIRM_ATTRIBUTE_WITH_CODE';\n};\nconst isShouldConfirmUserAttributeStep = (_, _ref0) => {\n  let {\n    data\n  } = _ref0;\n  return (data === null || data === void 0 ? void 0 : data.step) === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\n};\nconst isResetPasswordStep = (_, _ref1) => {\n  let {\n    data\n  } = _ref1;\n  return (data === null || data === void 0 ? void 0 : data.step) === 'RESET_PASSWORD';\n};\nconst isConfirmSignUpStep = (_, _ref10) => {\n  let {\n    data\n  } = _ref10;\n  return (data === null || data === void 0 ? void 0 : data.step) === 'CONFIRM_SIGN_UP';\n};\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = _ref11 => {\n  let {\n    step\n  } = _ref11;\n  return SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\n};\nconst shouldSetupTotp = _ref12 => {\n  let {\n    step\n  } = _ref12;\n  return step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\n};\nconst shouldSetupEmail = _ref13 => {\n  let {\n    step\n  } = _ref13;\n  return step === 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP';\n};\nconst shouldSelectMfaType = _ref14 => {\n  let {\n    step\n  } = _ref14;\n  return ['CONTINUE_SIGN_IN_WITH_MFA_SELECTION', 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION'].includes(step);\n};\nconst shouldResetPassword = _ref15 => {\n  let {\n    step\n  } = _ref15;\n  return step === 'RESET_PASSWORD';\n};\nconst shouldConfirmResetPassword = _ref16 => {\n  let {\n    step\n  } = _ref16;\n  return step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\n};\nconst shouldConfirmSignUp = _ref17 => {\n  let {\n    step\n  } = _ref17;\n  return step === 'CONFIRM_SIGN_UP';\n};\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, _ref18) => {\n  let {\n    data\n  } = _ref18;\n  const {\n    email,\n    phone_number,\n    phone_number_verified,\n    email_verified\n  } = data;\n  // if neither email nor phone_number exist\n  // there is nothing to verify\n  if (!email && !phone_number) return false;\n  // email/phone_verified is returned as a string\n  const emailNotVerified = email_verified === undefined || email_verified === 'false';\n  const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n  // only request verification if both email and phone are not verified\n  return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, _ref19) => {\n  let {\n    data\n  } = _ref19;\n  return data.message === 'User is already confirmed.';\n};\nconst GUARDS = {\n  hasCompletedAttributeConfirmation,\n  hasCompletedResetPassword,\n  hasCompletedSignIn,\n  hasCompletedSignUp,\n  isConfirmSignUpStep,\n  isConfirmUserAttributeStep,\n  isResetPasswordStep,\n  isShouldConfirmUserAttributeStep,\n  isUserAlreadyConfirmed,\n  shouldAutoSignIn,\n  shouldConfirmResetPassword,\n  shouldConfirmSignIn,\n  shouldConfirmSignInWithNewPassword,\n  shouldConfirmSignUp,\n  shouldConfirmSignUpFromSignIn,\n  shouldResetPassword,\n  shouldResetPasswordFromSignIn,\n  shouldSetupTotp,\n  shouldSetupEmail,\n  shouldSelectMfaType,\n  shouldVerifyAttribute\n};\nexport { GUARDS as default };","map":{"version":3,"names":["SIGN_IN_STEP_MFA_CONFIRMATION","shouldConfirmSignInWithNewPassword","_","_ref","data","nextStep","signInStep","shouldResetPasswordFromSignIn","_ref2","_data$nextStep","shouldConfirmSignUpFromSignIn","_ref3","shouldAutoSignIn","_ref4","signUpStep","hasCompletedSignIn","_ref5","hasCompletedSignUp","_ref6","hasCompletedResetPassword","_ref7","resetPasswordStep","hasCompletedAttributeConfirmation","_ref8","step","isConfirmUserAttributeStep","_ref9","isShouldConfirmUserAttributeStep","_ref0","isResetPasswordStep","_ref1","isConfirmSignUpStep","_ref10","shouldConfirmSignIn","_ref11","includes","shouldSetupTotp","_ref12","shouldSetupEmail","_ref13","shouldSelectMfaType","_ref14","shouldResetPassword","_ref15","shouldConfirmResetPassword","_ref16","shouldConfirmSignUp","_ref17","shouldVerifyAttribute","_ref18","email","phone_number","phone_number_verified","email_verified","emailNotVerified","undefined","phoneNotVerified","isUserAlreadyConfirmed","_ref19","message","GUARDS","default"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/guards.mjs"],"sourcesContent":["const SIGN_IN_STEP_MFA_CONFIRMATION = [\n    'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n    'CONFIRM_SIGN_IN_WITH_TOTP_CODE',\n    'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',\n];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, { data }) => data?.nextStep.signInStep ===\n    'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\nconst shouldResetPasswordFromSignIn = (_, { data }) => data?.nextStep?.signInStep === 'RESET_PASSWORD';\nconst shouldConfirmSignUpFromSignIn = (_, { data }) => data?.nextStep.signInStep === 'CONFIRM_SIGN_UP';\nconst shouldAutoSignIn = (_, { data }) => data?.nextStep.signUpStep === 'COMPLETE_AUTO_SIGN_IN';\nconst hasCompletedSignIn = (_, { data }) => data?.nextStep.signInStep === 'DONE';\nconst hasCompletedSignUp = (_, { data }) => data?.nextStep.signUpStep === 'DONE';\nconst hasCompletedResetPassword = (_, { data }) => data?.nextStep.resetPasswordStep === 'DONE';\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, { data }) => data?.step === 'CONFIRM_ATTRIBUTE_COMPLETE';\nconst isConfirmUserAttributeStep = (_, { data }) => data?.step === 'CONFIRM_ATTRIBUTE_WITH_CODE';\nconst isShouldConfirmUserAttributeStep = (_, { data }) => data?.step === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\nconst isResetPasswordStep = (_, { data }) => data?.step === 'RESET_PASSWORD';\nconst isConfirmSignUpStep = (_, { data }) => data?.step === 'CONFIRM_SIGN_UP';\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = ({ step }) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\nconst shouldSetupTotp = ({ step }) => step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\nconst shouldSetupEmail = ({ step }) => step === 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP';\nconst shouldSelectMfaType = ({ step }) => [\n    'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n    'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',\n].includes(step);\nconst shouldResetPassword = ({ step }) => step === 'RESET_PASSWORD';\nconst shouldConfirmResetPassword = ({ step }) => step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\nconst shouldConfirmSignUp = ({ step }) => step === 'CONFIRM_SIGN_UP';\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, { data }) => {\n    const { email, phone_number, phone_number_verified, email_verified } = data;\n    // if neither email nor phone_number exist\n    // there is nothing to verify\n    if (!email && !phone_number)\n        return false;\n    // email/phone_verified is returned as a string\n    const emailNotVerified = email_verified === undefined || email_verified === 'false';\n    const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n    // only request verification if both email and phone are not verified\n    return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, { data }) => data.message === 'User is already confirmed.';\nconst GUARDS = {\n    hasCompletedAttributeConfirmation,\n    hasCompletedResetPassword,\n    hasCompletedSignIn,\n    hasCompletedSignUp,\n    isConfirmSignUpStep,\n    isConfirmUserAttributeStep,\n    isResetPasswordStep,\n    isShouldConfirmUserAttributeStep,\n    isUserAlreadyConfirmed,\n    shouldAutoSignIn,\n    shouldConfirmResetPassword,\n    shouldConfirmSignIn,\n    shouldConfirmSignInWithNewPassword,\n    shouldConfirmSignUp,\n    shouldConfirmSignUpFromSignIn,\n    shouldResetPassword,\n    shouldResetPasswordFromSignIn,\n    shouldSetupTotp,\n    shouldSetupEmail,\n    shouldSelectMfaType,\n    shouldVerifyAttribute,\n};\n\nexport { GUARDS as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}