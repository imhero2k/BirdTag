{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { StorageError } from '../../../../../../errors/StorageError.mjs';\nimport { resolveS3ConfigAndInput } from '../../../../utils/resolveS3ConfigAndInput.mjs';\nimport { CanceledError } from '../../../../../../errors/CanceledError.mjs';\nimport '../../../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../../../utils/logger.mjs';\nimport { validateStorageOperationInput } from '../../../../utils/validateStorageOperationInput.mjs';\nimport { STORAGE_INPUT_KEY, DEFAULT_ACCESS_LEVEL, DEFAULT_QUEUE_SIZE } from '../../../../utils/constants.mjs';\nimport '../../../../utils/client/s3data/base.mjs';\nimport '../../../../utils/client/s3data/getObject.mjs';\nimport '../../../../utils/client/s3data/listObjectsV2.mjs';\nimport '../../../../utils/client/s3data/putObject.mjs';\nimport '../../../../utils/client/s3data/createMultipartUpload.mjs';\nimport '../../../../utils/client/s3data/uploadPart.mjs';\nimport { completeMultipartUpload } from '../../../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../../../utils/client/s3data/listParts.mjs';\nimport { abortMultipartUpload } from '../../../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../../../utils/client/s3data/copyObject.mjs';\nimport { headObject } from '../../../../utils/client/s3data/headObject.mjs';\nimport '../../../../utils/client/s3data/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../../../utils/userAgent.mjs';\nimport { calculateContentCRC32 } from '../../../../utils/crc32.mjs';\nimport { IntegrityError } from '../../../../../../errors/IntegrityError.mjs';\nimport { uploadPartExecutor } from './uploadPartExecutor.mjs';\nimport { serializeUploadOptions, getUploadsCacheKey, removeCachedUpload } from './uploadCache.mjs';\nimport { getConcurrentUploadsProgressTracker } from './progressTracker.mjs';\nimport { loadOrCreateMultipartUpload } from './initialUpload.mjs';\nimport { getDataChunker } from './getDataChunker.mjs';\nimport { calculatePartSize } from './calculatePartSize.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Create closure hiding the multipart upload implementation details and expose the upload job and control functions(\n * onPause, onResume, onCancel).\n *\n * @internal\n */\nconst getMultipartUploadHandlers = (uploadDataInput, size) => {\n  var _uploadDataInput$opti;\n  let resolveCallback;\n  let rejectCallback;\n  let inProgressUpload;\n  let resolvedS3Config;\n  let abortController;\n  let resolvedAccessLevel;\n  let resolvedBucket;\n  let resolvedKeyPrefix;\n  let resolvedIdentityId;\n  let uploadCacheKey;\n  let finalKey;\n  let expectedBucketOwner;\n  // Special flag that differentiates HTTP requests abort error caused by pause() from ones caused by cancel().\n  // The former one should NOT cause the upload job to throw, but cancels any pending HTTP requests.\n  // This should be replaced by a special abort reason. However,the support of this API is lagged behind.\n  let isAbortSignalFromPause = false;\n  const {\n    resumableUploadsCache\n  } = (_uploadDataInput$opti = uploadDataInput.options) !== null && _uploadDataInput$opti !== void 0 ? _uploadDataInput$opti : {};\n  const startUpload = async () => {\n    const {\n      options: uploadDataOptions,\n      data\n    } = uploadDataInput;\n    const resolvedS3Options = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n    abortController = new AbortController();\n    isAbortSignalFromPause = false;\n    resolvedS3Config = resolvedS3Options.s3Config;\n    resolvedBucket = resolvedS3Options.bucket;\n    resolvedIdentityId = resolvedS3Options.identityId;\n    expectedBucketOwner = uploadDataOptions === null || uploadDataOptions === void 0 ? void 0 : uploadDataOptions.expectedBucketOwner;\n    const {\n      inputType,\n      objectKey\n    } = validateStorageOperationInput(uploadDataInput, resolvedIdentityId);\n    const {\n      contentDisposition,\n      contentEncoding,\n      contentType = 'application/octet-stream',\n      metadata,\n      preventOverwrite,\n      onProgress\n    } = uploadDataOptions !== null && uploadDataOptions !== void 0 ? uploadDataOptions : {};\n    finalKey = objectKey;\n    // Resolve \"key\" specific options\n    if (inputType === STORAGE_INPUT_KEY) {\n      const accessLevel = uploadDataOptions === null || uploadDataOptions === void 0 ? void 0 : uploadDataOptions.accessLevel;\n      resolvedKeyPrefix = resolvedS3Options.keyPrefix;\n      finalKey = resolvedKeyPrefix + objectKey;\n      resolvedAccessLevel = resolveAccessLevel(accessLevel);\n    }\n    const optionsHash = await calculateContentCRC32(serializeUploadOptions(uploadDataOptions));\n    if (!inProgressUpload) {\n      const {\n        uploadId,\n        cachedParts,\n        finalCrc32\n      } = await loadOrCreateMultipartUpload({\n        s3Config: resolvedS3Config,\n        accessLevel: resolvedAccessLevel,\n        bucket: resolvedBucket,\n        keyPrefix: resolvedKeyPrefix,\n        key: objectKey,\n        contentType,\n        contentDisposition,\n        contentEncoding,\n        metadata,\n        data,\n        size,\n        abortSignal: abortController.signal,\n        checksumAlgorithm: uploadDataOptions === null || uploadDataOptions === void 0 ? void 0 : uploadDataOptions.checksumAlgorithm,\n        optionsHash,\n        resumableUploadsCache,\n        expectedBucketOwner\n      });\n      inProgressUpload = {\n        uploadId,\n        completedParts: cachedParts,\n        finalCrc32\n      };\n    }\n    uploadCacheKey = size ? getUploadsCacheKey({\n      file: data instanceof File ? data : undefined,\n      accessLevel: resolvedAccessLevel,\n      contentType: uploadDataOptions === null || uploadDataOptions === void 0 ? void 0 : uploadDataOptions.contentType,\n      bucket: resolvedBucket,\n      size,\n      key: objectKey,\n      optionsHash\n    }) : undefined;\n    const dataChunker = getDataChunker(data, size);\n    const completedPartNumberSet = new Set(inProgressUpload.completedParts.map(_ref => {\n      let {\n        PartNumber\n      } = _ref;\n      return PartNumber;\n    }));\n    const onPartUploadCompletion = (partNumber, eTag, crc32) => {\n      var _inProgressUpload;\n      (_inProgressUpload = inProgressUpload) === null || _inProgressUpload === void 0 || _inProgressUpload.completedParts.push(_objectSpread({\n        PartNumber: partNumber,\n        ETag: eTag\n      }, crc32 ? {\n        ChecksumCRC32: crc32\n      } : {}));\n    };\n    const concurrentUploadsProgressTracker = getConcurrentUploadsProgressTracker({\n      size,\n      onProgress\n    });\n    const concurrentUploadPartExecutors = [];\n    for (let index = 0; index < DEFAULT_QUEUE_SIZE; index++) {\n      concurrentUploadPartExecutors.push(uploadPartExecutor({\n        dataChunkerGenerator: dataChunker,\n        completedPartNumberSet,\n        s3Config: resolvedS3Config,\n        abortSignal: abortController.signal,\n        bucket: resolvedBucket,\n        finalKey,\n        uploadId: inProgressUpload.uploadId,\n        onPartUploadCompletion,\n        onProgress: concurrentUploadsProgressTracker.getOnProgressListener(),\n        isObjectLockEnabled: resolvedS3Options.isObjectLockEnabled,\n        useCRC32Checksum: Boolean(inProgressUpload.finalCrc32),\n        expectedBucketOwner\n      }));\n    }\n    await Promise.all(concurrentUploadPartExecutors);\n    validateCompletedParts(inProgressUpload.completedParts, size);\n    const {\n      ETag: eTag\n    } = await completeMultipartUpload(_objectSpread(_objectSpread({}, resolvedS3Config), {}, {\n      abortSignal: abortController.signal,\n      userAgentValue: getStorageUserAgentValue(StorageAction.UploadData)\n    }), {\n      Bucket: resolvedBucket,\n      Key: finalKey,\n      UploadId: inProgressUpload.uploadId,\n      ChecksumCRC32: inProgressUpload.finalCrc32,\n      ChecksumType: inProgressUpload.finalCrc32 ? 'FULL_OBJECT' : undefined,\n      IfNoneMatch: preventOverwrite ? '*' : undefined,\n      MultipartUpload: {\n        Parts: sortUploadParts(inProgressUpload.completedParts)\n      },\n      ExpectedBucketOwner: expectedBucketOwner\n    });\n    // If full-object CRC32 checksum is NOT enabled, we need to ensure the upload integrity by making extra HEAD call\n    // to verify the uploaded object size.\n    if (!inProgressUpload.finalCrc32) {\n      const {\n        ContentLength: uploadedObjectSize,\n        $metadata\n      } = await headObject(resolvedS3Config, {\n        Bucket: resolvedBucket,\n        Key: finalKey,\n        ExpectedBucketOwner: expectedBucketOwner\n      });\n      if (uploadedObjectSize && uploadedObjectSize !== size) {\n        throw new StorageError({\n          name: 'Error',\n          message: \"Upload failed. Expected object size \".concat(size, \", but got \").concat(uploadedObjectSize, \".\"),\n          metadata: $metadata\n        });\n      }\n    }\n    if (resumableUploadsCache && uploadCacheKey) {\n      await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n    }\n    const result = {\n      eTag,\n      contentType,\n      metadata\n    };\n    return inputType === STORAGE_INPUT_KEY ? _objectSpread({\n      key: objectKey\n    }, result) : _objectSpread({\n      path: objectKey\n    }, result);\n  };\n  const startUploadWithResumability = () => startUpload().then(resolveCallback).catch(error => {\n    var _abortController;\n    const abortSignal = (_abortController = abortController) === null || _abortController === void 0 ? void 0 : _abortController.signal;\n    if (abortSignal !== null && abortSignal !== void 0 && abortSignal.aborted && isAbortSignalFromPause) {\n      logger.debug('upload paused.');\n    } else {\n      // Uncaught errors should be exposed to the users.\n      rejectCallback(error);\n    }\n  });\n  const multipartUploadJob = () => new Promise((resolve, reject) => {\n    resolveCallback = resolve;\n    rejectCallback = reject;\n    startUploadWithResumability();\n  });\n  const onPause = () => {\n    var _abortController2;\n    isAbortSignalFromPause = true;\n    (_abortController2 = abortController) === null || _abortController2 === void 0 || _abortController2.abort();\n  };\n  const onResume = () => {\n    startUploadWithResumability();\n  };\n  const onCancel = message => {\n    var _abortController3;\n    // 1. abort in-flight API requests\n    (_abortController3 = abortController) === null || _abortController3 === void 0 || _abortController3.abort(message);\n    const cancelUpload = async () => {\n      var _inProgressUpload2;\n      // 2. clear upload cache.\n      if (uploadCacheKey && resumableUploadsCache) {\n        await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n      }\n      // 3. clear multipart upload on server side.\n      await abortMultipartUpload(resolvedS3Config, {\n        Bucket: resolvedBucket,\n        Key: finalKey,\n        UploadId: (_inProgressUpload2 = inProgressUpload) === null || _inProgressUpload2 === void 0 ? void 0 : _inProgressUpload2.uploadId,\n        ExpectedBucketOwner: expectedBucketOwner\n      });\n    };\n    cancelUpload().catch(e => {\n      logger.debug('error when cancelling upload task.', e);\n    });\n    rejectCallback(\n    // Internal error that should not be exposed to the users. They should use isCancelError() to check if\n    // the error is caused by cancel().\n    new CanceledError(message ? {\n      message\n    } : undefined));\n  };\n  return {\n    multipartUploadJob,\n    onPause,\n    onResume,\n    onCancel\n  };\n};\nconst resolveAccessLevel = accessLevel => {\n  var _ref2, _Amplify$libraryOptio;\n  return (_ref2 = accessLevel !== null && accessLevel !== void 0 ? accessLevel : (_Amplify$libraryOptio = Amplify.libraryOptions.Storage) === null || _Amplify$libraryOptio === void 0 || (_Amplify$libraryOptio = _Amplify$libraryOptio.S3) === null || _Amplify$libraryOptio === void 0 ? void 0 : _Amplify$libraryOptio.defaultAccessLevel) !== null && _ref2 !== void 0 ? _ref2 : DEFAULT_ACCESS_LEVEL;\n};\nconst validateCompletedParts = (completedParts, size) => {\n  const partsExpected = Math.ceil(size / calculatePartSize(size));\n  const validPartCount = completedParts.length === partsExpected;\n  const sorted = sortUploadParts(completedParts);\n  const validPartNumbers = sorted.every((part, index) => part.PartNumber === index + 1);\n  if (!validPartCount || !validPartNumbers) {\n    throw new IntegrityError();\n  }\n};\nconst sortUploadParts = parts => {\n  return [...parts].sort((partA, partB) => partA.PartNumber - partB.PartNumber);\n};\nexport { getMultipartUploadHandlers };","map":{"version":3,"names":["getMultipartUploadHandlers","uploadDataInput","size","_uploadDataInput$opti","resolveCallback","rejectCallback","inProgressUpload","resolvedS3Config","abortController","resolvedAccessLevel","resolvedBucket","resolvedKeyPrefix","resolvedIdentityId","uploadCacheKey","finalKey","expectedBucketOwner","isAbortSignalFromPause","resumableUploadsCache","options","startUpload","uploadDataOptions","data","resolvedS3Options","resolveS3ConfigAndInput","Amplify","AbortController","s3Config","bucket","identityId","inputType","objectKey","validateStorageOperationInput","contentDisposition","contentEncoding","contentType","metadata","preventOverwrite","onProgress","STORAGE_INPUT_KEY","accessLevel","keyPrefix","resolveAccessLevel","optionsHash","calculateContentCRC32","serializeUploadOptions","uploadId","cachedParts","finalCrc32","loadOrCreateMultipartUpload","key","abortSignal","signal","checksumAlgorithm","completedParts","getUploadsCacheKey","file","File","undefined","dataChunker","getDataChunker","completedPartNumberSet","Set","map","_ref","PartNumber","onPartUploadCompletion","partNumber","eTag","crc32","_inProgressUpload","push","_objectSpread","ETag","ChecksumCRC32","concurrentUploadsProgressTracker","getConcurrentUploadsProgressTracker","concurrentUploadPartExecutors","index","DEFAULT_QUEUE_SIZE","uploadPartExecutor","dataChunkerGenerator","getOnProgressListener","isObjectLockEnabled","useCRC32Checksum","Boolean","Promise","all","validateCompletedParts","completeMultipartUpload","userAgentValue","getStorageUserAgentValue","StorageAction","UploadData","Bucket","Key","UploadId","ChecksumType","IfNoneMatch","MultipartUpload","Parts","sortUploadParts","ExpectedBucketOwner","ContentLength","uploadedObjectSize","$metadata","headObject","StorageError","name","message","concat","removeCachedUpload","result","path","startUploadWithResumability","then","catch","error","_abortController","aborted","logger","debug","multipartUploadJob","resolve","reject","onPause","_abortController2","abort","onResume","onCancel","_abortController3","cancelUpload","_inProgressUpload2","abortMultipartUpload","e","CanceledError","_ref2","_Amplify$libraryOptio","libraryOptions","Storage","S3","defaultAccessLevel","DEFAULT_ACCESS_LEVEL","partsExpected","Math","ceil","calculatePartSize","validPartCount","length","sorted","validPartNumbers","every","part","IntegrityError","parts","sort","partA","partB"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/uploadData/multipart/uploadHandlers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateStorageOperationInput, } from '../../../../utils';\nimport { DEFAULT_ACCESS_LEVEL, DEFAULT_QUEUE_SIZE, STORAGE_INPUT_KEY, } from '../../../../utils/constants';\nimport { StorageError } from '../../../../../../errors/StorageError';\nimport { CanceledError } from '../../../../../../errors/CanceledError';\nimport { abortMultipartUpload, completeMultipartUpload, headObject, } from '../../../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../../../utils/userAgent';\nimport { logger } from '../../../../../../utils';\nimport { calculateContentCRC32 } from '../../../../utils/crc32';\nimport { IntegrityError } from '../../../../../../errors/IntegrityError';\nimport { uploadPartExecutor } from './uploadPartExecutor';\nimport { getUploadsCacheKey, removeCachedUpload, serializeUploadOptions, } from './uploadCache';\nimport { getConcurrentUploadsProgressTracker } from './progressTracker';\nimport { loadOrCreateMultipartUpload } from './initialUpload';\nimport { getDataChunker } from './getDataChunker';\nimport { calculatePartSize } from './calculatePartSize';\n/**\n * Create closure hiding the multipart upload implementation details and expose the upload job and control functions(\n * onPause, onResume, onCancel).\n *\n * @internal\n */\nexport const getMultipartUploadHandlers = (uploadDataInput, size) => {\n    let resolveCallback;\n    let rejectCallback;\n    let inProgressUpload;\n    let resolvedS3Config;\n    let abortController;\n    let resolvedAccessLevel;\n    let resolvedBucket;\n    let resolvedKeyPrefix;\n    let resolvedIdentityId;\n    let uploadCacheKey;\n    let finalKey;\n    let expectedBucketOwner;\n    // Special flag that differentiates HTTP requests abort error caused by pause() from ones caused by cancel().\n    // The former one should NOT cause the upload job to throw, but cancels any pending HTTP requests.\n    // This should be replaced by a special abort reason. However,the support of this API is lagged behind.\n    let isAbortSignalFromPause = false;\n    const { resumableUploadsCache } = uploadDataInput.options ?? {};\n    const startUpload = async () => {\n        const { options: uploadDataOptions, data } = uploadDataInput;\n        const resolvedS3Options = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n        abortController = new AbortController();\n        isAbortSignalFromPause = false;\n        resolvedS3Config = resolvedS3Options.s3Config;\n        resolvedBucket = resolvedS3Options.bucket;\n        resolvedIdentityId = resolvedS3Options.identityId;\n        expectedBucketOwner = uploadDataOptions?.expectedBucketOwner;\n        const { inputType, objectKey } = validateStorageOperationInput(uploadDataInput, resolvedIdentityId);\n        const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', metadata, preventOverwrite, onProgress, } = uploadDataOptions ?? {};\n        finalKey = objectKey;\n        // Resolve \"key\" specific options\n        if (inputType === STORAGE_INPUT_KEY) {\n            const accessLevel = uploadDataOptions\n                ?.accessLevel;\n            resolvedKeyPrefix = resolvedS3Options.keyPrefix;\n            finalKey = resolvedKeyPrefix + objectKey;\n            resolvedAccessLevel = resolveAccessLevel(accessLevel);\n        }\n        const optionsHash = await calculateContentCRC32(serializeUploadOptions(uploadDataOptions));\n        if (!inProgressUpload) {\n            const { uploadId, cachedParts, finalCrc32 } = await loadOrCreateMultipartUpload({\n                s3Config: resolvedS3Config,\n                accessLevel: resolvedAccessLevel,\n                bucket: resolvedBucket,\n                keyPrefix: resolvedKeyPrefix,\n                key: objectKey,\n                contentType,\n                contentDisposition,\n                contentEncoding,\n                metadata,\n                data,\n                size,\n                abortSignal: abortController.signal,\n                checksumAlgorithm: uploadDataOptions?.checksumAlgorithm,\n                optionsHash,\n                resumableUploadsCache,\n                expectedBucketOwner,\n            });\n            inProgressUpload = {\n                uploadId,\n                completedParts: cachedParts,\n                finalCrc32,\n            };\n        }\n        uploadCacheKey = size\n            ? getUploadsCacheKey({\n                file: data instanceof File ? data : undefined,\n                accessLevel: resolvedAccessLevel,\n                contentType: uploadDataOptions?.contentType,\n                bucket: resolvedBucket,\n                size,\n                key: objectKey,\n                optionsHash,\n            })\n            : undefined;\n        const dataChunker = getDataChunker(data, size);\n        const completedPartNumberSet = new Set(inProgressUpload.completedParts.map(({ PartNumber }) => PartNumber));\n        const onPartUploadCompletion = (partNumber, eTag, crc32) => {\n            inProgressUpload?.completedParts.push({\n                PartNumber: partNumber,\n                ETag: eTag,\n                // TODO: crc32 can always be added once RN also has an implementation\n                ...(crc32 ? { ChecksumCRC32: crc32 } : {}),\n            });\n        };\n        const concurrentUploadsProgressTracker = getConcurrentUploadsProgressTracker({\n            size,\n            onProgress,\n        });\n        const concurrentUploadPartExecutors = [];\n        for (let index = 0; index < DEFAULT_QUEUE_SIZE; index++) {\n            concurrentUploadPartExecutors.push(uploadPartExecutor({\n                dataChunkerGenerator: dataChunker,\n                completedPartNumberSet,\n                s3Config: resolvedS3Config,\n                abortSignal: abortController.signal,\n                bucket: resolvedBucket,\n                finalKey,\n                uploadId: inProgressUpload.uploadId,\n                onPartUploadCompletion,\n                onProgress: concurrentUploadsProgressTracker.getOnProgressListener(),\n                isObjectLockEnabled: resolvedS3Options.isObjectLockEnabled,\n                useCRC32Checksum: Boolean(inProgressUpload.finalCrc32),\n                expectedBucketOwner,\n            }));\n        }\n        await Promise.all(concurrentUploadPartExecutors);\n        validateCompletedParts(inProgressUpload.completedParts, size);\n        const { ETag: eTag } = await completeMultipartUpload({\n            ...resolvedS3Config,\n            abortSignal: abortController.signal,\n            userAgentValue: getStorageUserAgentValue(StorageAction.UploadData),\n        }, {\n            Bucket: resolvedBucket,\n            Key: finalKey,\n            UploadId: inProgressUpload.uploadId,\n            ChecksumCRC32: inProgressUpload.finalCrc32,\n            ChecksumType: inProgressUpload.finalCrc32 ? 'FULL_OBJECT' : undefined,\n            IfNoneMatch: preventOverwrite ? '*' : undefined,\n            MultipartUpload: {\n                Parts: sortUploadParts(inProgressUpload.completedParts),\n            },\n            ExpectedBucketOwner: expectedBucketOwner,\n        });\n        // If full-object CRC32 checksum is NOT enabled, we need to ensure the upload integrity by making extra HEAD call\n        // to verify the uploaded object size.\n        if (!inProgressUpload.finalCrc32) {\n            const { ContentLength: uploadedObjectSize, $metadata } = await headObject(resolvedS3Config, {\n                Bucket: resolvedBucket,\n                Key: finalKey,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n            if (uploadedObjectSize && uploadedObjectSize !== size) {\n                throw new StorageError({\n                    name: 'Error',\n                    message: `Upload failed. Expected object size ${size}, but got ${uploadedObjectSize}.`,\n                    metadata: $metadata,\n                });\n            }\n        }\n        if (resumableUploadsCache && uploadCacheKey) {\n            await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n        }\n        const result = {\n            eTag,\n            contentType,\n            metadata,\n        };\n        return inputType === STORAGE_INPUT_KEY\n            ? { key: objectKey, ...result }\n            : { path: objectKey, ...result };\n    };\n    const startUploadWithResumability = () => startUpload()\n        .then(resolveCallback)\n        .catch(error => {\n        const abortSignal = abortController?.signal;\n        if (abortSignal?.aborted && isAbortSignalFromPause) {\n            logger.debug('upload paused.');\n        }\n        else {\n            // Uncaught errors should be exposed to the users.\n            rejectCallback(error);\n        }\n    });\n    const multipartUploadJob = () => new Promise((resolve, reject) => {\n        resolveCallback = resolve;\n        rejectCallback = reject;\n        startUploadWithResumability();\n    });\n    const onPause = () => {\n        isAbortSignalFromPause = true;\n        abortController?.abort();\n    };\n    const onResume = () => {\n        startUploadWithResumability();\n    };\n    const onCancel = (message) => {\n        // 1. abort in-flight API requests\n        abortController?.abort(message);\n        const cancelUpload = async () => {\n            // 2. clear upload cache.\n            if (uploadCacheKey && resumableUploadsCache) {\n                await removeCachedUpload(resumableUploadsCache, uploadCacheKey);\n            }\n            // 3. clear multipart upload on server side.\n            await abortMultipartUpload(resolvedS3Config, {\n                Bucket: resolvedBucket,\n                Key: finalKey,\n                UploadId: inProgressUpload?.uploadId,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n        };\n        cancelUpload().catch(e => {\n            logger.debug('error when cancelling upload task.', e);\n        });\n        rejectCallback(\n        // Internal error that should not be exposed to the users. They should use isCancelError() to check if\n        // the error is caused by cancel().\n        new CanceledError(message ? { message } : undefined));\n    };\n    return {\n        multipartUploadJob,\n        onPause,\n        onResume,\n        onCancel,\n    };\n};\nconst resolveAccessLevel = (accessLevel) => accessLevel ??\n    Amplify.libraryOptions.Storage?.S3?.defaultAccessLevel ??\n    DEFAULT_ACCESS_LEVEL;\nconst validateCompletedParts = (completedParts, size) => {\n    const partsExpected = Math.ceil(size / calculatePartSize(size));\n    const validPartCount = completedParts.length === partsExpected;\n    const sorted = sortUploadParts(completedParts);\n    const validPartNumbers = sorted.every((part, index) => part.PartNumber === index + 1);\n    if (!validPartCount || !validPartNumbers) {\n        throw new IntegrityError();\n    }\n};\nconst sortUploadParts = (parts) => {\n    return [...parts].sort((partA, partB) => partA.PartNumber - partB.PartNumber);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,0BAA0B,GAAGA,CAACC,eAAe,EAAEC,IAAI,KAAK;EAAA,IAAAC,qBAAA;EACjE,IAAIC,eAAe;EACnB,IAAIC,cAAc;EAClB,IAAIC,gBAAgB;EACpB,IAAIC,gBAAgB;EACpB,IAAIC,eAAe;EACnB,IAAIC,mBAAmB;EACvB,IAAIC,cAAc;EAClB,IAAIC,iBAAiB;EACrB,IAAIC,kBAAkB;EACtB,IAAIC,cAAc;EAClB,IAAIC,QAAQ;EACZ,IAAIC,mBAAmB;EAC3B;EACA;EACA;EACI,IAAIC,sBAAsB,GAAG,KAAK;EAClC,MAAM;IAAEC;EAAqB,CAAE,IAAAd,qBAAA,GAAGF,eAAe,CAACiB,OAAO,cAAAf,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC/D,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAM;MAAED,OAAO,EAAEE,iBAAiB;MAAEC;IAAI,CAAE,GAAGpB,eAAe;IAC5D,MAAMqB,iBAAiB,GAAG,MAAMC,uBAAuB,CAACC,OAAO,EAAEvB,eAAe,CAAC;IACjFO,eAAe,GAAG,IAAIiB,eAAe,EAAE;IACvCT,sBAAsB,GAAG,KAAK;IAC9BT,gBAAgB,GAAGe,iBAAiB,CAACI,QAAQ;IAC7ChB,cAAc,GAAGY,iBAAiB,CAACK,MAAM;IACzCf,kBAAkB,GAAGU,iBAAiB,CAACM,UAAU;IACjDb,mBAAmB,GAAGK,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEL,mBAAmB;IAC5D,MAAM;MAAEc,SAAS;MAAEC;IAAS,CAAE,GAAGC,6BAA6B,CAAC9B,eAAe,EAAEW,kBAAkB,CAAC;IACnG,MAAM;MAAEoB,kBAAkB;MAAEC,eAAe;MAAEC,WAAW,GAAG,0BAA0B;MAAEC,QAAQ;MAAEC,gBAAgB;MAAEC;IAAU,CAAG,GAAGjB,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAI,EAAE;IAC1JN,QAAQ,GAAGgB,SAAS;IAC5B;IACQ,IAAID,SAAS,KAAKS,iBAAiB,EAAE;MACjC,MAAMC,WAAW,GAAGnB,iBAAA,aAAAA,iBAAA,uBAAAA,iBAAA,CACdmB,WAAW;MACjB5B,iBAAiB,GAAGW,iBAAiB,CAACkB,SAAS;MAC/C1B,QAAQ,GAAGH,iBAAiB,GAAGmB,SAAS;MACxCrB,mBAAmB,GAAGgC,kBAAkB,CAACF,WAAW,CAAC;IACjE;IACQ,MAAMG,WAAW,GAAG,MAAMC,qBAAqB,CAACC,sBAAsB,CAACxB,iBAAiB,CAAC,CAAC;IAC1F,IAAI,CAACd,gBAAgB,EAAE;MACnB,MAAM;QAAEuC,QAAQ;QAAEC,WAAW;QAAEC;MAAU,CAAE,GAAG,MAAMC,2BAA2B,CAAC;QAC5EtB,QAAQ,EAAEnB,gBAAgB;QAC1BgC,WAAW,EAAE9B,mBAAmB;QAChCkB,MAAM,EAAEjB,cAAc;QACtB8B,SAAS,EAAE7B,iBAAiB;QAC5BsC,GAAG,EAAEnB,SAAS;QACdI,WAAW;QACXF,kBAAkB;QAClBC,eAAe;QACfE,QAAQ;QACRd,IAAI;QACJnB,IAAI;QACJgD,WAAW,EAAE1C,eAAe,CAAC2C,MAAM;QACnCC,iBAAiB,EAAEhC,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEgC,iBAAiB;QACvDV,WAAW;QACXzB,qBAAqB;QACrBF;MAChB,CAAa,CAAC;MACFT,gBAAgB,GAAG;QACfuC,QAAQ;QACRQ,cAAc,EAAEP,WAAW;QAC3BC;MAChB,CAAa;IACb;IACQlC,cAAc,GAAGX,IAAA,GACXoD,kBAAkB,CAAC;MACjBC,IAAI,EAAElC,IAAI,YAAYmC,IAAI,GAAGnC,IAAI,GAAGoC,SAAS;MAC7ClB,WAAW,EAAE9B,mBAAmB;MAChCyB,WAAW,EAAEd,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEc,WAAW;MAC3CP,MAAM,EAAEjB,cAAc;MACtBR,IAAI;MACJ+C,GAAG,EAAEnB,SAAS;MACdY;IAChB,CAAa,IACCe,SAAS;IACf,MAAMC,WAAW,GAAGC,cAAc,CAACtC,IAAI,EAAEnB,IAAI,CAAC;IAC9C,MAAM0D,sBAAsB,GAAG,IAAIC,GAAG,CAACvD,gBAAgB,CAAC+C,cAAc,CAACS,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC;MAAU,CAAE,GAAAD,IAAA;MAAA,OAAKC,UAAU;IAAA,EAAC,CAAC;IAC3G,MAAMC,sBAAsB,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,KAAK,KAAK;MAAA,IAAAC,iBAAA;MACxD,CAAAA,iBAAA,GAAA/D,gBAAgB,cAAA+D,iBAAA,eAAhBA,iBAAA,CAAkBhB,cAAc,CAACiB,IAAI,CAAAC,aAAA;QACjCP,UAAU,EAAEE,UAAU;QACtBM,IAAI,EAAEL;MAAI,GAENC,KAAK,GAAG;QAAEK,aAAa,EAAEL;MAAK,CAAE,GAAG,EAAE,CAC5C,CAAC;IACd,CAAS;IACD,MAAMM,gCAAgC,GAAGC,mCAAmC,CAAC;MACzEzE,IAAI;MACJmC;IACZ,CAAS,CAAC;IACF,MAAMuC,6BAA6B,GAAG,EAAE;IACxC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGC,kBAAkB,EAAED,KAAK,EAAE,EAAE;MACrDD,6BAA6B,CAACN,IAAI,CAACS,kBAAkB,CAAC;QAClDC,oBAAoB,EAAEtB,WAAW;QACjCE,sBAAsB;QACtBlC,QAAQ,EAAEnB,gBAAgB;QAC1B2C,WAAW,EAAE1C,eAAe,CAAC2C,MAAM;QACnCxB,MAAM,EAAEjB,cAAc;QACtBI,QAAQ;QACR+B,QAAQ,EAAEvC,gBAAgB,CAACuC,QAAQ;QACnCoB,sBAAsB;QACtB5B,UAAU,EAAEqC,gCAAgC,CAACO,qBAAqB,EAAE;QACpEC,mBAAmB,EAAE5D,iBAAiB,CAAC4D,mBAAmB;QAC1DC,gBAAgB,EAAEC,OAAO,CAAC9E,gBAAgB,CAACyC,UAAU,CAAC;QACtDhC;MAChB,CAAa,CAAC,CAAC;IACf;IACQ,MAAMsE,OAAO,CAACC,GAAG,CAACV,6BAA6B,CAAC;IAChDW,sBAAsB,CAACjF,gBAAgB,CAAC+C,cAAc,EAAEnD,IAAI,CAAC;IAC7D,MAAM;MAAEsE,IAAI,EAAEL;IAAI,CAAE,GAAG,MAAMqB,uBAAuB,CAAAjB,aAAA,CAAAA,aAAA,KAC7ChE,gBAAgB;MACnB2C,WAAW,EAAE1C,eAAe,CAAC2C,MAAM;MACnCsC,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,UAAU;IAAC,IACnE;MACCC,MAAM,EAAEnF,cAAc;MACtBoF,GAAG,EAAEhF,QAAQ;MACbiF,QAAQ,EAAEzF,gBAAgB,CAACuC,QAAQ;MACnC4B,aAAa,EAAEnE,gBAAgB,CAACyC,UAAU;MAC1CiD,YAAY,EAAE1F,gBAAgB,CAACyC,UAAU,GAAG,aAAa,GAAGU,SAAS;MACrEwC,WAAW,EAAE7D,gBAAgB,GAAG,GAAG,GAAGqB,SAAS;MAC/CyC,eAAe,EAAE;QACbC,KAAK,EAAEC,eAAe,CAAC9F,gBAAgB,CAAC+C,cAAc;MACtE,CAAa;MACDgD,mBAAmB,EAAEtF;IACjC,CAAS,CAAC;IACV;IACA;IACQ,IAAI,CAACT,gBAAgB,CAACyC,UAAU,EAAE;MAC9B,MAAM;QAAEuD,aAAa,EAAEC,kBAAkB;QAAEC;MAAS,CAAE,GAAG,MAAMC,UAAU,CAAClG,gBAAgB,EAAE;QACxFsF,MAAM,EAAEnF,cAAc;QACtBoF,GAAG,EAAEhF,QAAQ;QACbuF,mBAAmB,EAAEtF;MACrC,CAAa,CAAC;MACF,IAAIwF,kBAAkB,IAAIA,kBAAkB,KAAKrG,IAAI,EAAE;QACnD,MAAM,IAAIwG,YAAY,CAAC;UACnBC,IAAI,EAAE,OAAO;UACbC,OAAO,yCAAAC,MAAA,CAAyC3G,IAAI,gBAAA2G,MAAA,CAAaN,kBAAkB,MAAG;UACtFpE,QAAQ,EAAEqE;QAC9B,CAAiB,CAAC;MAClB;IACA;IACQ,IAAIvF,qBAAqB,IAAIJ,cAAc,EAAE;MACzC,MAAMiG,kBAAkB,CAAC7F,qBAAqB,EAAEJ,cAAc,CAAC;IAC3E;IACQ,MAAMkG,MAAM,GAAG;MACX5C,IAAI;MACJjC,WAAW;MACXC;IACZ,CAAS;IACD,OAAON,SAAS,KAAKS,iBAAA,GAAAiC,aAAA;MACbtB,GAAG,EAAEnB;IAAS,GAAKiF,MAAM,IAAAxC,aAAA;MACzByC,IAAI,EAAElF;IAAS,GAAKiF,MAAM,CAAE;EAC5C,CAAK;EACD,MAAME,2BAA2B,GAAGA,CAAA,KAAM9F,WAAW,GAChD+F,IAAI,CAAC9G,eAAe,EACpB+G,KAAK,CAACC,KAAK,IAAI;IAAA,IAAAC,gBAAA;IAChB,MAAMnE,WAAW,IAAAmE,gBAAA,GAAG7G,eAAe,cAAA6G,gBAAA,uBAAfA,gBAAA,CAAiBlE,MAAM;IAC3C,IAAID,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEoE,OAAO,IAAItG,sBAAsB,EAAE;MAChDuG,MAAM,CAACC,KAAK,CAAC,gBAAgB,CAAC;IAC1C,OACa;MACb;MACYnH,cAAc,CAAC+G,KAAK,CAAC;IACjC;EACA,CAAK,CAAC;EACF,MAAMK,kBAAkB,GAAGA,CAAA,KAAM,IAAIpC,OAAO,CAAC,CAACqC,OAAO,EAAEC,MAAM,KAAK;IAC9DvH,eAAe,GAAGsH,OAAO;IACzBrH,cAAc,GAAGsH,MAAM;IACvBV,2BAA2B,EAAE;EACrC,CAAK,CAAC;EACF,MAAMW,OAAO,GAAGA,CAAA,KAAM;IAAA,IAAAC,iBAAA;IAClB7G,sBAAsB,GAAG,IAAI;IAC7B,CAAA6G,iBAAA,GAAArH,eAAe,cAAAqH,iBAAA,eAAfA,iBAAA,CAAiBC,KAAK,EAAE;EAChC,CAAK;EACD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACnBd,2BAA2B,EAAE;EACrC,CAAK;EACD,MAAMe,QAAQ,GAAIpB,OAAO,IAAK;IAAA,IAAAqB,iBAAA;IAClC;IACQ,CAAAA,iBAAA,GAAAzH,eAAe,cAAAyH,iBAAA,eAAfA,iBAAA,CAAiBH,KAAK,CAAClB,OAAO,CAAC;IAC/B,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAAA,IAAAC,kBAAA;MACzC;MACY,IAAItH,cAAc,IAAII,qBAAqB,EAAE;QACzC,MAAM6F,kBAAkB,CAAC7F,qBAAqB,EAAEJ,cAAc,CAAC;MAC/E;MACA;MACY,MAAMuH,oBAAoB,CAAC7H,gBAAgB,EAAE;QACzCsF,MAAM,EAAEnF,cAAc;QACtBoF,GAAG,EAAEhF,QAAQ;QACbiF,QAAQ,GAAAoC,kBAAA,GAAE7H,gBAAgB,cAAA6H,kBAAA,uBAAhBA,kBAAA,CAAkBtF,QAAQ;QACpCwD,mBAAmB,EAAEtF;MACrC,CAAa,CAAC;IACd,CAAS;IACDmH,YAAY,EAAE,CAACf,KAAK,CAACkB,CAAC,IAAI;MACtBd,MAAM,CAACC,KAAK,CAAC,oCAAoC,EAAEa,CAAC,CAAC;IACjE,CAAS,CAAC;IACFhI,cAAc;IACtB;IACA;IACQ,IAAIiI,aAAa,CAAC1B,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAGnD,SAAS,CAAC,CAAC;EAC7D,CAAK;EACD,OAAO;IACHgE,kBAAkB;IAClBG,OAAO;IACPG,QAAQ;IACRC;EACR,CAAK;AACL;AACA,MAAMvF,kBAAkB,GAAIF,WAAW;EAAA,IAAAgG,KAAA,EAAAC,qBAAA;EAAA,QAAAD,KAAA,GAAKhG,WAAW,aAAXA,WAAW,cAAXA,WAAW,IAAAiG,qBAAA,GACnDhH,OAAO,CAACiH,cAAc,CAACC,OAAO,cAAAF,qBAAA,gBAAAA,qBAAA,GAA9BA,qBAAA,CAAgCG,EAAE,cAAAH,qBAAA,uBAAlCA,qBAAA,CAAoCI,kBAAkB,cAAAL,KAAA,cAAAA,KAAA,GACtDM,oBAAoB;AAAA;AACxB,MAAMtD,sBAAsB,GAAGA,CAAClC,cAAc,EAAEnD,IAAI,KAAK;EACrD,MAAM4I,aAAa,GAAGC,IAAI,CAACC,IAAI,CAAC9I,IAAI,GAAG+I,iBAAiB,CAAC/I,IAAI,CAAC,CAAC;EAC/D,MAAMgJ,cAAc,GAAG7F,cAAc,CAAC8F,MAAM,KAAKL,aAAa;EAC9D,MAAMM,MAAM,GAAGhD,eAAe,CAAC/C,cAAc,CAAC;EAC9C,MAAMgG,gBAAgB,GAAGD,MAAM,CAACE,KAAK,CAAC,CAACC,IAAI,EAAE1E,KAAK,KAAK0E,IAAI,CAACvF,UAAU,KAAKa,KAAK,GAAG,CAAC,CAAC;EACrF,IAAI,CAACqE,cAAc,IAAI,CAACG,gBAAgB,EAAE;IACtC,MAAM,IAAIG,cAAc,EAAE;EAClC;AACA,CAAC;AACD,MAAMpD,eAAe,GAAIqD,KAAK,IAAK;EAC/B,OAAO,CAAC,GAAGA,KAAK,CAAC,CAACC,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAAC3F,UAAU,GAAG4F,KAAK,CAAC5F,UAAU,CAAC;AACjF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}