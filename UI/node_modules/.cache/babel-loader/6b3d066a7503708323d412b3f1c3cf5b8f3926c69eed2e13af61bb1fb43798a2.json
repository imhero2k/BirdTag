{"ast":null,"code":"import _objectSpread from \"/Users/saisaran/Desktop/BirdTag/UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { parseMetadata, EMPTY_SHA256_HASH, presignUrl } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { CONTENT_SHA256_HEADER } from '../runtime/constants.mjs';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, deserializeMetadata, map, deserializeTimestamp, deserializeNumber, deserializeBoolean } from '../utils/deserializeHelpers.mjs';\nimport { validateS3RequiredParameter, serializePathnameObjectKey, assignStringVariables } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst getObjectSerializer = async (input, endpoint) => {\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  url.search = new AmplifyUrlSearchParams({\n    'x-id': 'GetObject'\n  }).toString();\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'GET',\n    headers: _objectSpread(_objectSpread({}, input.Range && {\n      Range: input.Range\n    }), assignStringVariables({\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n    })),\n    url\n  };\n};\nconst getObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    return _objectSpread(_objectSpread({}, map(response.headers, {\n      DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n      AcceptRanges: 'accept-ranges',\n      Expiration: 'x-amz-expiration',\n      Restore: 'x-amz-restore',\n      LastModified: ['last-modified', deserializeTimestamp],\n      ContentLength: ['content-length', deserializeNumber],\n      ETag: 'etag',\n      ChecksumCRC32: 'x-amz-checksum-crc32',\n      ChecksumCRC32C: 'x-amz-checksum-crc32c',\n      ChecksumSHA1: 'x-amz-checksum-sha1',\n      ChecksumSHA256: 'x-amz-checksum-sha256',\n      ChecksumType: 'x-amz-checksum-type',\n      MissingMeta: ['x-amz-missing-meta', deserializeNumber],\n      VersionId: 'x-amz-version-id',\n      CacheControl: 'cache-control',\n      ContentDisposition: 'content-disposition',\n      ContentEncoding: 'content-encoding',\n      ContentLanguage: 'content-language',\n      ContentRange: 'content-range',\n      ContentType: 'content-type',\n      Expires: ['expires', deserializeTimestamp],\n      WebsiteRedirectLocation: 'x-amz-website-redirect-location',\n      ServerSideEncryption: 'x-amz-server-side-encryption',\n      SSECustomerAlgorithm: 'x-amz-server-side-encryption-customer-algorithm',\n      SSECustomerKeyMD5: 'x-amz-server-side-encryption-customer-key-md5',\n      SSEKMSKeyId: 'x-amz-server-side-encryption-aws-kms-key-id',\n      BucketKeyEnabled: ['x-amz-server-side-encryption-bucket-key-enabled', deserializeBoolean],\n      StorageClass: 'x-amz-storage-class',\n      RequestCharged: 'x-amz-request-charged',\n      ReplicationStatus: 'x-amz-replication-status',\n      PartsCount: ['x-amz-mp-parts-count', deserializeNumber],\n      TagCount: ['x-amz-tagging-count', deserializeNumber],\n      ObjectLockMode: 'x-amz-object-lock-mode',\n      ObjectLockRetainUntilDate: ['x-amz-object-lock-retain-until-date', deserializeTimestamp],\n      ObjectLockLegalHoldStatus: 'x-amz-object-lock-legal-hold'\n    })), {}, {\n      Metadata: deserializeMetadata(response.headers),\n      $metadata: parseMetadata(response),\n      // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of\n      // fetch, which represents payload in Blob instread of ReadableStream.\n      Body: response.body\n    });\n  }\n};\nconst getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, _objectSpread(_objectSpread({}, defaultConfig), {}, {\n  responseType: 'blob'\n}));\n/**\n * Get a presigned URL for the `getObject` API.\n *\n * @internal\n */\nconst getPresignedGetObjectUrl = async (config, input) => {\n  const endpoint = defaultConfig.endpointResolver(config, input);\n  const {\n    url,\n    headers,\n    method\n  } = await getObjectSerializer(input, endpoint);\n  // TODO: set content sha256 query parameter with value of UNSIGNED-PAYLOAD instead of empty hash.\n  // It requires changes in presignUrl. Without this change, the generated url still works,\n  // but not the same as other tools like AWS SDK and CLI.\n  url.searchParams.append(CONTENT_SHA256_HEADER, EMPTY_SHA256_HASH);\n  if (config.userAgentValue) {\n    var _config$userAgentHead;\n    url.searchParams.append((_config$userAgentHead = config.userAgentHeader) !== null && _config$userAgentHead !== void 0 ? _config$userAgentHead : USER_AGENT_HEADER, config.userAgentValue);\n  }\n  if (input.ResponseContentType) {\n    url.searchParams.append('response-content-type', input.ResponseContentType);\n  }\n  if (input.ResponseContentDisposition) {\n    url.searchParams.append('response-content-disposition', input.ResponseContentDisposition);\n  }\n  for (const [headerName, value] of Object.entries(headers).sort((_ref, _ref2) => {\n    let [key1] = _ref;\n    let [key2] = _ref2;\n    return key1.localeCompare(key2);\n  })) {\n    url.searchParams.append(headerName, value);\n  }\n  return presignUrl({\n    method,\n    url,\n    body: undefined\n  }, _objectSpread(_objectSpread({\n    signingService: defaultConfig.service,\n    signingRegion: config.region\n  }, defaultConfig), config));\n};\nexport { getObject, getPresignedGetObjectUrl };","map":{"version":3,"names":["USER_AGENT_HEADER","getObjectSerializer","input","endpoint","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","AmplifyUrlSearchParams","validateObjectUrl","bucketName","Bucket","key","objectURL","method","headers","_objectSpread","Range","assignStringVariables","ExpectedBucketOwner","getObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","map","DeleteMarker","deserializeBoolean","AcceptRanges","Expiration","Restore","LastModified","deserializeTimestamp","ContentLength","deserializeNumber","ETag","ChecksumCRC32","ChecksumCRC32C","ChecksumSHA1","ChecksumSHA256","ChecksumType","MissingMeta","VersionId","CacheControl","ContentDisposition","ContentEncoding","ContentLanguage","ContentRange","ContentType","Expires","WebsiteRedirectLocation","ServerSideEncryption","SSECustomerAlgorithm","SSECustomerKeyMD5","SSEKMSKeyId","BucketKeyEnabled","StorageClass","RequestCharged","ReplicationStatus","PartsCount","TagCount","ObjectLockMode","ObjectLockRetainUntilDate","ObjectLockLegalHoldStatus","Metadata","deserializeMetadata","$metadata","parseMetadata","Body","body","getObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType","getPresignedGetObjectUrl","config","endpointResolver","searchParams","append","CONTENT_SHA256_HEADER","EMPTY_SHA256_HASH","userAgentValue","_config$userAgentHead","userAgentHeader","ResponseContentType","ResponseContentDisposition","headerName","value","Object","entries","sort","_ref","_ref2","key1","key2","localeCompare","presignUrl","undefined","signingService","service","signingRegion","region"],"sources":["/Users/saisaran/Desktop/BirdTag/UI/node_modules/@aws-amplify/storage/src/providers/s3/utils/client/s3data/getObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_SHA256_HASH, parseMetadata, presignUrl, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { CONTENT_SHA256_HEADER, assignStringVariables, buildStorageServiceError, deserializeBoolean, deserializeMetadata, deserializeNumber, deserializeTimestamp, map, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError, } from './base';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst getObjectSerializer = async (input, endpoint) => {\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'GetObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'GET',\n        headers: {\n            ...(input.Range && { Range: input.Range }),\n            ...assignStringVariables({\n                'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            }),\n        },\n        url,\n    };\n};\nconst getObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        return {\n            ...map(response.headers, {\n                DeleteMarker: ['x-amz-delete-marker', deserializeBoolean],\n                AcceptRanges: 'accept-ranges',\n                Expiration: 'x-amz-expiration',\n                Restore: 'x-amz-restore',\n                LastModified: ['last-modified', deserializeTimestamp],\n                ContentLength: ['content-length', deserializeNumber],\n                ETag: 'etag',\n                ChecksumCRC32: 'x-amz-checksum-crc32',\n                ChecksumCRC32C: 'x-amz-checksum-crc32c',\n                ChecksumSHA1: 'x-amz-checksum-sha1',\n                ChecksumSHA256: 'x-amz-checksum-sha256',\n                ChecksumType: 'x-amz-checksum-type',\n                MissingMeta: ['x-amz-missing-meta', deserializeNumber],\n                VersionId: 'x-amz-version-id',\n                CacheControl: 'cache-control',\n                ContentDisposition: 'content-disposition',\n                ContentEncoding: 'content-encoding',\n                ContentLanguage: 'content-language',\n                ContentRange: 'content-range',\n                ContentType: 'content-type',\n                Expires: ['expires', deserializeTimestamp],\n                WebsiteRedirectLocation: 'x-amz-website-redirect-location',\n                ServerSideEncryption: 'x-amz-server-side-encryption',\n                SSECustomerAlgorithm: 'x-amz-server-side-encryption-customer-algorithm',\n                SSECustomerKeyMD5: 'x-amz-server-side-encryption-customer-key-md5',\n                SSEKMSKeyId: 'x-amz-server-side-encryption-aws-kms-key-id',\n                BucketKeyEnabled: [\n                    'x-amz-server-side-encryption-bucket-key-enabled',\n                    deserializeBoolean,\n                ],\n                StorageClass: 'x-amz-storage-class',\n                RequestCharged: 'x-amz-request-charged',\n                ReplicationStatus: 'x-amz-replication-status',\n                PartsCount: ['x-amz-mp-parts-count', deserializeNumber],\n                TagCount: ['x-amz-tagging-count', deserializeNumber],\n                ObjectLockMode: 'x-amz-object-lock-mode',\n                ObjectLockRetainUntilDate: [\n                    'x-amz-object-lock-retain-until-date',\n                    deserializeTimestamp,\n                ],\n                ObjectLockLegalHoldStatus: 'x-amz-object-lock-legal-hold',\n            }),\n            Metadata: deserializeMetadata(response.headers),\n            $metadata: parseMetadata(response),\n            // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of\n            // fetch, which represents payload in Blob instread of ReadableStream.\n            Body: response.body,\n        };\n    }\n};\nexport const getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, { ...defaultConfig, responseType: 'blob' });\n/**\n * Get a presigned URL for the `getObject` API.\n *\n * @internal\n */\nexport const getPresignedGetObjectUrl = async (config, input) => {\n    const endpoint = defaultConfig.endpointResolver(config, input);\n    const { url, headers, method } = await getObjectSerializer(input, endpoint);\n    // TODO: set content sha256 query parameter with value of UNSIGNED-PAYLOAD instead of empty hash.\n    // It requires changes in presignUrl. Without this change, the generated url still works,\n    // but not the same as other tools like AWS SDK and CLI.\n    url.searchParams.append(CONTENT_SHA256_HEADER, EMPTY_SHA256_HASH);\n    if (config.userAgentValue) {\n        url.searchParams.append(config.userAgentHeader ?? USER_AGENT_HEADER, config.userAgentValue);\n    }\n    if (input.ResponseContentType) {\n        url.searchParams.append('response-content-type', input.ResponseContentType);\n    }\n    if (input.ResponseContentDisposition) {\n        url.searchParams.append('response-content-disposition', input.ResponseContentDisposition);\n    }\n    for (const [headerName, value] of Object.entries(headers).sort(([key1], [key2]) => key1.localeCompare(key2))) {\n        url.searchParams.append(headerName, value);\n    }\n    return presignUrl({ method, url, body: undefined }, {\n        signingService: defaultConfig.service,\n        signingRegion: config.region,\n        ...defaultConfig,\n        ...config,\n    });\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,iBAAiB,GAAG,kBAAkB;AAC5C,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACF,QAAQ,CAACC,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAACL,KAAK,CAACM,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEF,KAAK,CAACM,GAAG,CAAC;EACzDJ,GAAG,CAACO,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpC,MAAM,EAAE;EAChB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACbO,iBAAiB,CAAC;IACdC,UAAU,EAAEZ,KAAK,CAACa,MAAM;IACxBC,GAAG,EAAEd,KAAK,CAACM,GAAG;IACdS,SAAS,EAAEb;EACnB,CAAK,CAAC;EACF,OAAO;IACHc,MAAM,EAAE,KAAK;IACbC,OAAO,EAAAC,aAAA,CAAAA,aAAA,KACClB,KAAK,CAACmB,KAAK,IAAI;MAAEA,KAAK,EAAEnB,KAAK,CAACmB;IAAK,CAAE,GACtCC,qBAAqB,CAAC;MACrB,6BAA6B,EAAEpB,KAAK,CAACqB;IACrD,CAAa,CAAC,CACL;IACDnB;EACR,CAAK;AACL,CAAC;AACD,MAAMoB,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,OAAAL,aAAA,CAAAA,aAAA,KACOS,GAAG,CAACJ,QAAQ,CAACN,OAAO,EAAE;MACrBW,YAAY,EAAE,CAAC,qBAAqB,EAAEC,kBAAkB,CAAC;MACzDC,YAAY,EAAE,eAAe;MAC7BC,UAAU,EAAE,kBAAkB;MAC9BC,OAAO,EAAE,eAAe;MACxBC,YAAY,EAAE,CAAC,eAAe,EAAEC,oBAAoB,CAAC;MACrDC,aAAa,EAAE,CAAC,gBAAgB,EAAEC,iBAAiB,CAAC;MACpDC,IAAI,EAAE,MAAM;MACZC,aAAa,EAAE,sBAAsB;MACrCC,cAAc,EAAE,uBAAuB;MACvCC,YAAY,EAAE,qBAAqB;MACnCC,cAAc,EAAE,uBAAuB;MACvCC,YAAY,EAAE,qBAAqB;MACnCC,WAAW,EAAE,CAAC,oBAAoB,EAAEP,iBAAiB,CAAC;MACtDQ,SAAS,EAAE,kBAAkB;MAC7BC,YAAY,EAAE,eAAe;MAC7BC,kBAAkB,EAAE,qBAAqB;MACzCC,eAAe,EAAE,kBAAkB;MACnCC,eAAe,EAAE,kBAAkB;MACnCC,YAAY,EAAE,eAAe;MAC7BC,WAAW,EAAE,cAAc;MAC3BC,OAAO,EAAE,CAAC,SAAS,EAAEjB,oBAAoB,CAAC;MAC1CkB,uBAAuB,EAAE,iCAAiC;MAC1DC,oBAAoB,EAAE,8BAA8B;MACpDC,oBAAoB,EAAE,iDAAiD;MACvEC,iBAAiB,EAAE,+CAA+C;MAClEC,WAAW,EAAE,6CAA6C;MAC1DC,gBAAgB,EAAE,CACd,iDAAiD,EACjD5B,kBAAkB,CACrB;MACD6B,YAAY,EAAE,qBAAqB;MACnCC,cAAc,EAAE,uBAAuB;MACvCC,iBAAiB,EAAE,0BAA0B;MAC7CC,UAAU,EAAE,CAAC,sBAAsB,EAAEzB,iBAAiB,CAAC;MACvD0B,QAAQ,EAAE,CAAC,qBAAqB,EAAE1B,iBAAiB,CAAC;MACpD2B,cAAc,EAAE,wBAAwB;MACxCC,yBAAyB,EAAE,CACvB,qCAAqC,EACrC9B,oBAAoB,CACvB;MACD+B,yBAAyB,EAAE;IAC3C,CAAa,CAAC;MACFC,QAAQ,EAAEC,mBAAmB,CAAC5C,QAAQ,CAACN,OAAO,CAAC;MAC/CmD,SAAS,EAAEC,aAAa,CAAC9C,QAAQ,CAAC;MAC9C;MACA;MACY+C,IAAI,EAAE/C,QAAQ,CAACgD;IAAI;EAE/B;AACA,CAAC;AACW,MAACC,SAAS,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE3E,mBAAmB,EAAEuB,qBAAqB,EAAAJ,aAAA,CAAAA,aAAA,KAAOyD,aAAa;EAAEC,YAAY,EAAE;AAAM,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACY,MAACC,wBAAwB,GAAG,MAAAA,CAAOC,MAAM,EAAE9E,KAAK,KAAK;EAC7D,MAAMC,QAAQ,GAAG0E,aAAa,CAACI,gBAAgB,CAACD,MAAM,EAAE9E,KAAK,CAAC;EAC9D,MAAM;IAAEE,GAAG;IAAEe,OAAO;IAAED;EAAM,CAAE,GAAG,MAAMjB,mBAAmB,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAC/E;EACA;EACA;EACIC,GAAG,CAAC8E,YAAY,CAACC,MAAM,CAACC,qBAAqB,EAAEC,iBAAiB,CAAC;EACjE,IAAIL,MAAM,CAACM,cAAc,EAAE;IAAA,IAAAC,qBAAA;IACvBnF,GAAG,CAAC8E,YAAY,CAACC,MAAM,EAAAI,qBAAA,GAACP,MAAM,CAACQ,eAAe,cAAAD,qBAAA,cAAAA,qBAAA,GAAIvF,iBAAiB,EAAEgF,MAAM,CAACM,cAAc,CAAC;EACnG;EACI,IAAIpF,KAAK,CAACuF,mBAAmB,EAAE;IAC3BrF,GAAG,CAAC8E,YAAY,CAACC,MAAM,CAAC,uBAAuB,EAAEjF,KAAK,CAACuF,mBAAmB,CAAC;EACnF;EACI,IAAIvF,KAAK,CAACwF,0BAA0B,EAAE;IAClCtF,GAAG,CAAC8E,YAAY,CAACC,MAAM,CAAC,8BAA8B,EAAEjF,KAAK,CAACwF,0BAA0B,CAAC;EACjG;EACI,KAAK,MAAM,CAACC,UAAU,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC3E,OAAO,CAAC,CAAC4E,IAAI,CAAC,CAAAC,IAAA,EAAAC,KAAA;IAAA,IAAC,CAACC,IAAI,CAAC,GAAAF,IAAA;IAAA,IAAE,CAACG,IAAI,CAAC,GAAAF,KAAA;IAAA,OAAKC,IAAI,CAACE,aAAa,CAACD,IAAI,CAAC;EAAA,EAAC,EAAE;IAC1G/F,GAAG,CAAC8E,YAAY,CAACC,MAAM,CAACQ,UAAU,EAAEC,KAAK,CAAC;EAClD;EACI,OAAOS,UAAU,CAAC;IAAEnF,MAAM;IAAEd,GAAG;IAAEqE,IAAI,EAAE6B;EAAS,CAAE,EAAAlF,aAAA,CAAAA,aAAA;IAC9CmF,cAAc,EAAE1B,aAAa,CAAC2B,OAAO;IACrCC,aAAa,EAAEzB,MAAM,CAAC0B;EAAM,GACzB7B,aAAa,GACbG,MAAM,CACZ,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}